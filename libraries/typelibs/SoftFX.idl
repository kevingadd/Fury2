[
    uuid(3CB89DD9-2E5A-45D3-A6FF-E87B0081CDCC),
    helpstring("Fury² Game Creation System SoftFX library"),
    version(1.0),
    lcid(0x0409)
]
library SoftFX {

    struct Rectangle {
        int Left;
        int Top;
        int Width;
        int Height;
    };

    struct ColorFilter {
        int Length;
        byte Red[256];
        byte Green[256];
        byte Blue[256];
    };

    struct FPoint {
        float X;
        float Y;
    };

    struct FPoint3 {
        float X;
        float Y;
        float Z;
    };

    struct IPoint {
        int X;
        int Y;
    };

    struct FRect {
        float X1;
        float Y1;
        float X2;
        float Y2;
    };

    struct FLine {
        struct FPoint start;
        struct FPoint end;
    };

    struct ILine {
        struct IPoint start;
        struct IPoint end;
    };

    struct GradientVertex {
        float X;
        float Y;
        int Color;
    };

    struct TexturedVertex {
        float X, Y;
        float U, V;
    };

    struct GenericPolygon {
        int VertexPointer;
        int VertexCount;
        int InactiveVertexCount;
        byte Reserved;
    };

    struct HSLA {
        byte Hue;
        byte Sat;
        byte Lum;
        byte Alpha;
    };

    struct HSVA {
      short Hue;
      short Saturation;
      short Value;
      byte Alpha;
      byte Padding;
    };

    struct PixelFormat {
        byte RedStart;
        byte RedLength;
        byte GreenStart;
        byte GreenLength;
        byte BlueStart;
        byte BlueLength;
        byte AlphaStart;
        byte AlphaLength;
        int RedMask;
        int GreenMask;
        int BlueMask;
        int AlphaMask;
        byte Pitch;
    };    

    struct TilemapLayerParam {
        int pData;
        int Alpha;
        int X1;
        int Y1;
        int X2;
        int Y2;
        int Width;
        int Height;
        int pTileset;
        int MaskedTile;
        int Effect;
        byte WrapX;
        byte WrapY;
        byte RenderTarget;
        byte Reserved;
        int pAnimationMap;
        int TintColor;
    };

    struct ConvolutionFilter {
        int WeightPointer;
        int Width, Height;
        int XOffset, YOffset;
        int Divisor;
    };

    struct ConvolutionFilter2 {
        int WeightPointer;
        int Width, Height;
        int XOffset, YOffset;
        float Divisor;
        float Offset;
    };

    enum WindowSkinSectionFlags {
        SF_TopLeft = 1,
        SF_Top = 2,
        SF_TopRight = 4,
        SF_Right = 8,
        SF_BottomRight = 16,
        SF_Bottom = 32,
        SF_BottomLeft = 64,
        SF_Left = 128,
        SF_Middle = 256,
        SF_Edges = 127,
        SF_All = 511
    };

    enum SpriteSpecialEffects {
        fxHardShadow = 1,
        fxSoftShadow = 2,
        fxCastShadow = 4
    };

    enum ColorChannels {
        Blue = 0,
        Green = 1,
        Red = 2,
        Alpha = 3
    };

    enum SpriteObstructionTypes {
        UpwardRect = 0,
        CenteredRect = 1,
        CenteredSphere = 2,
        CenteredPolygon = 3,
        Beam = 4
    };

    enum LockingModes {
        UserLocking = 0,
        AutoUnlock = 1,
        AutoUnlockLockWhenDone = 2
    };

    enum SecondaryImageTypes {
        siOverlay = 0,
        siNormalMap = 1,
        siShadow = 2,
        siLightMap = 3,
        siGlowMap = 4,
        siShadowMap = 5,
        siBeginCap = 6,
        siEndCap = 7
    };

    struct SpriteSecondaryImage {
        int pImage;
        int ImageType;
    };

    struct SpriteObstruction {
        float Width;
        float Height;
        byte Type;
    };

    struct SpriteObstruction2 {
        float Width;
        float Height;
        byte Type;
        int pPolygon;
    };

    struct SpriteGraphic {
        int pImage;
        struct Rectangle Rectangle;
        float XCenter, YCenter;
        int MaskColor;
        int pSecondaryImages;
        int SecondaryImageCount;
    };

    struct EventParameters {
        short CollidedWith;
        byte CollidedWithMap;
        byte FadedOut;
        byte Moved;
        byte Changed;
    };

    struct VisualParameters {
        short Effect;
        short SpecialFX;
        int Color;
        float Alpha;
        float ScaleLevel;
        float RotationAngle;
        int IlluminationLevel;
        byte DiffuseLight;
        byte RenderTarget;
        byte Beam;
        byte Reserved2;
    };

    struct PhysicalParameters {
        byte Solid;
        byte Pushable;
        byte CanPush;
        byte Cull;
        float Weight;
    };

    struct AnimatedGraphicParam {
        int FrameCount;
        int pFrames;
        int Frame;
        int BlitMode;
        float Alpha;
        float XCenter, YCenter;
        int MatteColor;
    };

    struct SpritePosition {
        float X, Y, Z;
        float AX, AY, AZ;
    };

    struct SpriteVelocity {
        float X, Y, Z, V, B, BR, BRT, A, AT, VM, XF, YF, FW, CXF, CYF, CFM;
    };

    struct SpriteParam {
        struct SpritePosition Position;
        struct SpriteVelocity Velocity;
        struct SpriteObstruction2 Obstruction;
        struct SpriteGraphic Graphic;
        struct VisualParameters Params;
        struct PhysicalParameters Stats;
        struct EventParameters Events;
        byte Type;
        byte ProcessType;
        byte Culled;
        byte Visible;
        short Index;
        int AttachedGraphic;
        float ZHeight;
        float ZLeft;
        float ZRight;
        int Obj;
        int Next;
        int SortedNext;
    };

    struct CameraParam {
        int pRenderTargets;
        int RenderTargetCount;
        struct Rectangle Rectangle;
        float Alpha;
        float ParallaxX;
        float ParallaxY;
        int ViewportX;
        int ViewportY;
    };

    struct TextParam {
        int Width;
        int Height;
        int Lines;
        int Scroll_X;
        int Scroll_Y;
        int Selection_Start;
        int Selection_End;
        int Selection_Color;
        int Caret_Position;
        int Caret_Color;
        int CharFromPoint_X;
        int CharFromPoint_Y;
        int CharFromPoint;
		    int MaxChars;
		    int CharsDrawn;
		    int TabStopCount;
		    int TabStopPointer;
        byte EnableColorCodes;
        int Opacity;
    };

    struct RenderSpritesParam {
        int ShadowImage;
        int FrameRectangleColor;
        int BlockingColor;
        int OrientationLineColor;
        int VelocityLineColor;
        int SortingLineColor;
        byte DrawFrames;
        byte DrawSecondaryImages;
        byte DrawAttachedGraphics;
        byte DrawFrameRectangles;
        byte DrawBlocking;
        byte DrawOrientationLines;
        byte DrawVelocityLines;
        byte DrawSortingLines;
    };

    struct SubFontParam {
        int Name;
        int Font;
    };

    struct FontParam {
        int EffectMode;
        int MaskColor;
        int FillColor;
        int ShadowColor;
        int Alpha;
        int WrapMode;
        int BaseHeight;
        int BaseMode;
        int MapCount;
        int MapPointer;
        int SubFontCount;
        int SubFonts;
    };

    struct WindowSkinParam {
        int pImages;
        int Alpha;
        int MaskColor;
        int CornerColors[4];
        int EdgeOffsets[4];
        int TintColors[9];
        byte BackgroundMode;
        byte EdgeMode;
        byte RenderMode;
    };

    struct CharacterParam {
        int pImage;
        int MapValue;
        short XIncrement;
        short YIncrement;
        short XOffset;
        short YOffset;
    };
    
    struct LightingCamera {
      int ScrollX, ScrollY;
      struct Rectangle OutputRectangle;
      int OutputBuffer;
      int ScratchBuffer;
      float OutputScaleRatio;
      byte SaturationMode;
      byte AntiAlias;
    };

    struct LightingEnvironment {
      int Lights;
      int LightCount;
      int Obstructions;
      int ObstructionCount;
      int Planes;
      int PlaneCount;
      int AmbientLight;
      int Sprites;
      byte ForceRaycasting;
  	  int Matrix;
      int CollisionMatrix;
    };

    struct LightSourceRenderData {
      float ldist, ldist11;
      float xOffset, yOffset;
      float angleStart, angleEnd;
    };

    struct LightSource {
      float X, Y;
      int Color;
      int FalloffDistance;
      float Angle, Spread, SpinRate, FlickerLevel;
      byte NoiseOpacity, Visible, Culled, PlaneCulled;
      int AttachedSprite;
      float AttachX, AttachY, AttachH, AttachV;
      int Cache;
      byte CacheValid;
      byte Fuzziness;
      byte Reserved[2];
      struct Rectangle Rect;
      int FalloffDistance2;
      int Image;
      float ImageAlignX, ImageAlignY;
      float LightSize;
      struct LightSourceRenderData Data;
    };

    struct LightingObstruction {
      struct FLine Line;
    };

    struct LightingPlane {
      struct FLine Base;
      struct FLine Top;
    };

    struct LightingPlane2 {
      struct FPoint Start, End;
      int Height;
    };

    struct MapLayer {
      int Tiles;
      int Tileset;
      int AnimationTable;
      int Sprites;
      int Opacity;
      int BlitMode;
      short IgnoredTile;
      byte WrapX, WrapY;
      byte Prerendered;
      byte Visible;
      float ParallaxX, ParallaxY;
      int TintColor;
    };

    struct Map {
      int Width, Height;
      int LayerCount;
      int Layers;
    };

    struct MapCamera {
      struct Rectangle Area;
      int OutputBuffer;
      int ScratchBuffer;
      int ViewportX, ViewportY;
      int BackgroundColor;
      int BackgroundOpacity, MapOpacity;
      float ScaleRatioX, ScaleRatioY;
      int Scaler;
    };

    enum ParticleDecayModes {
      pdmNone,
      pdmSet,
      pdmAdd,
      pdmMultiply,
      pdmExponent,
      pdmRandomAdd,
      pdmRandomMultiply
    };

    enum ParticleRenderTypes {
      prtPixel,
      prtAntiAliasPixel,
      prtLine,
      prtAntiAliasLine,
      prtGradientLine,
      prtAntiAliasGradientLine,
      prtStroke,
      prtGraphic
    };

    enum ParticleLBehaviors {
      plbNone,
      plbRemove
    };

    enum ParticleLColorModes {
      plcNone,
      plcFade,
      plcInterpolate
    };

    enum ParticleAModes {
      pamFade,
      pamScale,
      pamFadeAndScale,
      pamRotate
    };

    struct ParticleGraphicParam {
      int FrameCount;
      int pFrames;
      float XCenter, YCenter;
      int MatteColor;
      int Alpha;
      float FrameIncrement;
      byte LoopMode;
    };

    struct ParticleType {
      float XVDecay;
      float YVDecay;
      float AVDecay;
      float LVDecay;
      float Thickness;
      float Softness;
      float CollisionResponse;
      int pGraphic;
      int Color1;
      int Color2;
      int DieCallback;
      int CollideCallback;
      int UserData;
      byte XVDecayMode;
      byte YVDecayMode;
      byte AVDecayMode;
      byte LVDecayMode;
      byte LColorMode;
      byte LBehavior;
      byte AMode;
      byte RenderType;
      byte RenderMode;
      byte RenderTarget;
      byte EnableCollision;
    };

    struct ParticleModifier {
        float X, Y;
        float Range, RangeScale;
        float Mass;
        float Attraction;
        float XVDecay;
        float YVDecay;
        float AVDecay;
        float LVDecay;
        Byte XVDecayMode;
        Byte YVDecayMode;
        Byte AVDecayMode;
        Byte LVDecayMode;
        int ExcludeType, RequireType;
        struct FRect Area;
    };

    struct ParticleGenerator {
      int Type;
      int Life;
      float GenerateRate;
      float GenerateDelay;
      float NewX, NewY, NewL, NewA, NewR;
      float NewXV, NewYV, NewLV, NewAV, NewRV;
      float RandomX, RandomY, RandomL, RandomA, RandomR;
      float RandomXV, RandomYV, RandomLV, RandomAV, RandomRV;
      float GenerateRotation;
      float RandomGenerateRotation;
      float CurrentDelay, CurrentRotation;
    };

    struct Particle {
      float X, Y, A, L;
      float XV, YV, AV, LV;
      float Frame;
      int Type;
    };

    struct ParticleCamera {
        int pRenderTargets;
        int RenderTargetCount;
        struct Rectangle Rectangle;
        float Alpha;
        float ViewportX;
        float ViewportY;
    };

    struct ParticleDieEvent {
      int engine;
      int type;
      int particle;
      int UserData;
    };

    struct ParticleCollideEvent {
      int engine;
      int type;
      int particle;
      int UserData;
      int sprite;
      int vector;
    };

    struct MeshPoint {
      float X, Y;
    };

    struct MeshParam {
      int Width;
      int Height;
      int pData;
    };  
    
    struct SpriteEngineOptions {
      int CollisionMatrix;
      float VelocityMultiplier;
    };

    struct StrokePoint {
        float X, Y;
        float Thickness;
        int Color;
    };

    struct Stroke {
        int Points;
        int PointCount;
        float Softness;
        byte Loop;
    };

    [dllname("SoftFX.DLL"), helpstring("SoftFX")]
    module SoftFX {

        [entry("_Initialize@0")]
        void Initialize(void);
        [entry("_Uninitialize@0")]
        void UnInitialize(void);
        [entry("_GetInitialized@0")]
        int GetInitialized(void);

        [entry("_AllocateImage@8")]
        int AllocateImage(int Width, int Height);
        [entry("_AllocateSharedImage@12")]
        int AllocateSharedImage(int Width, int Height, [string] char *ID);
        [entry("_AllocateDIBSection@12")]
        int AllocateDIBSection(int Width, int Height, int DC);
        [entry("_AllocateImageCopy@4")]
        int AllocateImageCopy(int Image);
        [entry("_AllocateImageFromFile@4")]
        int AllocateImageFromFile([string] char *Filename);
        [entry("_AllocateImageFromFileBuffer@8")]
        int AllocateImageFromFileBuffer(int Pointer, int Size);
        [entry("_AllocateEmptyImage@0")]
        int AllocateEmptyImage();
        [entry("_SaveImageToPNG@8")]
        int SaveImageToPNG(int Image, [string] char *Filename);
        [entry("_SaveImageToTGA@8")]
        int SaveImageToTGA(int Image, [string] char *Filename);

        [entry("_ReallocateImage@12")]
        void ReAllocateImage(int Image, int Width, int Height);
        [entry("_ResizeImage@12")]
        void ResizeImage(int Image, int Width, int Height);
        [entry("_ResampleImage@20")]
        void ResampleImage(int Target, int Source, int Width, int Height, int Mode);
        [entry("_SlideImage@12")]
        void SlideImage(int Image, int X, int Y);
        [entry("_OptimizeImage@4")]
        void OptimizeImage(int Image);
        [entry("_UnsizeImage@4")]
        void UnsizeImage(int Image);

        [entry("_LockImage@4")]
        int LockImage(int Image);
        [entry("_UnlockImage@4")]
        int UnlockImage(int Image);

        [entry("_DeallocateImage@4")]
        void DeallocateImage(int Image);

        [entry("_GetImageRectangle@8")]
        int GetImageRectangle(int Image, struct Rectangle *Rectangle);

        [entry("_GetImageClipRectangle@8")]
        int GetImageClipRectangle(int Image, struct Rectangle *Rectangle);
        [entry("_SetImageClipRectangle@8")]
        void SetImageClipRectangle(int Image, struct Rectangle *Rectangle);

        [entry("_NormalizeRectangle@4")]
        void NormalizeRectangle(struct Rectangle *Rectangle);

        [entry("_GenerateColorFilter@16")]
        int GenerateColorFilter(struct ColorFilter *Filter, int RedGamma, int GreenGamma, int BlueGamma);

        [entry("_ClearImage@4")]
        int ClearImage(int Image);
        [entry("_FillImage@8")]
        int FillImage(int Image, int Color);
        [entry("_CopyImage@8")]
        int CopyImage(int Dest, int Source);
        [entry("_RotateImage@8")]
        int RotateImage(int Image, float Angle);

        [entry("_GetImageWidth@4")]
        int GetImageWidth(int Image);
        [entry("_SetImageWidth@8")]
        void SetImageWidth(int Image, int Width);
        [entry("_GetImageHeight@4")]
        int GetImageHeight(int Image);
        [entry("_SetImageHeight@8")]
        void SetImageHeight(int Image, int Height);
        [entry("_GetImagePitch@4")]
        int GetImagePitch(int Image);
        [entry("_SetImagePitch@8")]
        void SetImagePitch(int Image, int Pitch);
        [entry("_GetImagePointer@12")]
        int GetImagePointer(int Image, int X, int Y);
        [entry("_SetImagePointer@8")]
        void SetImagePointer(int Image, int Pointer);
        [entry("_GetImageDIBHandle@4")]
        int GetImageDIBHandle(int Image);
        [entry("_GetImageSharedHandle@4")]
        int GetImageSharedHandle(int Image);
        [entry("_GetImageTag@8")]
        int GetImageTag(int Image, int Index);
        [entry("_SetImageTag@12")]
        void SetImageTag(int Image, int Index, int Value);
        [entry("_ClearImageTags@4")]
        int ClearImageTags(int Image);
        [entry("_GetImageLocked@4")]
        int GetImageLocked(int Image);
        [entry("_SetImageLocked@8")]
        void SetImageLocked(int Image, int Locked);
        [entry("_GetImageDirty@4")]
        int GetImageDirty(int Image);
        [entry("_SetImageDirty@8")]
        void SetImageDirty(int Image, int Dirty);
        [entry("_GetImagePremultiplied@4")]
        int GetImagePremultiplied(int Image);
        [entry("_SetImagePremultiplied@8")]
        void SetImagePremultiplied(int Image, int Premultiplied);
        [entry("_GetImageNormalsPrepared@4")]
        int GetImageNormalsPrepared(int Image);
        [entry("_SetImageNormalsPrepared@8")]
        void SetImageNormalsPrepared(int Image, int NormalsPrepared);

        [entry("_GetImageMatteColor@4")]
        int GetImageMatteColor(int Image);
        [entry("_SetImageMatteColor@8")]
        void SetImageMatteColor(int Image, int Color);

        [entry("_GetPixel@12")]
        int GetPixel(int Image, int X, int Y);
        [entry("_SetPixel@16")]
        int SetPixel(int Image, int X, int Y, int Color);

        [entry("_GetPixelAA@12")]
        int GetPixelAA(int Image, float X, float Y);
        [entry("_SetPixelAA@16")]
        int SetPixelAA(int Image, float X, float Y, int Color);

        [entry("_ClipRectangle_Image@8")]
        int ClipRectangle_Image(struct Rectangle *Rect, int Image);
        [entry("_ClipRectangle_ImageClipRect@8")]
        int ClipRectangle_ImageClipRect(struct Rectangle *Rect, int Image);

        [entry("_Clip2D_SimpleRect@24")]
        int Clip2D_SimpleRect([in] struct Rectangle *InRect, int DestImage, int SourceImage, [out] struct Rectangle *OutRect, [in, out] int *SourceX, [in, out] int *SourceY);
        [entry("_Clip2D_PairedRect@28")]
        int Clip2D_PairedRect([in] struct Rectangle *DestRect, [in] struct Rectangle *SourceRect, int DestImage, int SourceImage, struct Rectangle *DestRectOut, struct Rectangle *SourceRectOut, int CropOutputOutPtr);

        [entry("_SetCallbacks@8")]
        void SetCallbacks(int pDIBSection, int pDeleteObject);

        [entry("_SetLockingMode@4")]
        void SetLockingMode(int LockingMode);
        [entry("_GetLockingMode@0")]
        int GetLockingMode();

    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Primitives")]
    module Primitives {

        [entry("_FilterSimple_Box@12")]
        int Primitive_Box(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Box_SourceAlpha@12")]
        int Primitive_Box_SourceAlpha(int Image, struct Rectangle *Area, int Color);

        [entry("_FilterSimple_Line@12")]
        int Primitive_Line(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Line_AA@24")]
        int Primitive_Line_AA(int Image, float X1, float Y1, float X2, float Y2, int Color);
        [entry("_FilterSimple_Line_Additive@12")]
        int Primitive_Line_Additive(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Line_Subtractive@12")]
        int Primitive_Line_Subtractive(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Line_SourceAlpha@12")]
        int Primitive_Line_SourceAlpha(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Line_Gradient@16")]
        int Primitive_Line_Gradient(int Image, struct Rectangle *Area, int StartColor, int EndColor);
        [entry("_FilterSimple_Line_Gradient_AA@28")]
        int Primitive_Line_Gradient_AA(int Image, float X1, float Y1, float X2, float Y2, int StartColor, int EndColor);
        [entry("_FilterSimple_Line_Gradient_SourceAlpha@16")]
        int Primitive_Line_Gradient_SourceAlpha(int Image, struct Rectangle *Area, int StartColor, int EndColor);

        [entry("_FilterSimple_Circle@20")]
        int Primitive_Circle(int Image, int X, int Y, int Radius, int Color);
        [entry("_FilterSimple_Circle_SourceAlpha@20")]
        int Primitive_Circle_SourceAlpha(int Image, int X, int Y, int Radius, int Color);

        [entry("_FilterSimple_FilledCircle@20")]
        int Primitive_Circle_Filled(int Image, int X, int Y, int Radius, int Color);
        [entry("_FilterSimple_FilledCircle_SourceAlpha@20")]
        int Primitive_Circle_Filled_SourceAlpha(int Image, int X, int Y, int Radius, int Color);

        [entry("_FilterSimple_FilledCircle_AntiAlias@32")]
        int Primitive_Circle_Filled_AntiAlias(int Image, float X, float Y, float XRadius, float YRadius, int Color, int Renderer, float Accuracy);

        [entry("_FilterSimple_Circle_AntiAlias@40")]
        int Primitive_Circle_AntiAlias(int Image, float X, float Y, float XRadius, float YRadius, int Color, int Renderer, float Thickness, float Softness, float Accuracy);
        [entry("_FilterSimple_Pie_AntiAlias@48")]
        int Primitive_Pie_AntiAlias(int Image, float X, float Y, float XRadius, float YRadius, float Start, float End, int Color, int Renderer, float Thickness, float Softness, float Accuracy);
        [entry("_FilterSimple_Arc_AntiAlias@48")]
        int Primitive_Arc_AntiAlias(int Image, float X, float Y, float XRadius, float YRadius, float Start, float End, int Color, int Renderer, float Thickness, float Softness, float Accuracy);

        [entry("_FilterSimple_FilledArc_AntiAlias@40")]
        int Primitive_Arc_Filled_AntiAlias(int Image, float X, float Y, float R1, float R2, float Start, float End, int Color, int Renderer, float Step);
        [entry("_FilterSimple_FilledArc@40")]
        int Primitive_Arc_Filled(int Image, float X, float Y, float R1, float R2, float Start, float End, int Color, int Renderer, float Step);
        [entry("_FilterSimple_FilledArc_Gradient@44")]
        int Primitive_Arc_Filled_Gradient(int Image, float X, float Y, float R1, float R2, float Start, float End, int StartColor, int EndColor, int Renderer, float Step);

        [entry("_FilterSimple_FilledPie@40")]
        int Primitive_Pie_Filled(int Image, float X, float Y, float XRadius, float YRadius, float Start, float End, int Color, int Renderer, float Accuracy);
        [entry("_FilterSimple_FilledPie_AntiAlias@40")]
        int Primitive_Pie_Filled_AntiAlias(int Image, float X, float Y, float XRadius, float YRadius, float Start, float End, int Color, int Renderer, float Accuracy);

        [entry("_FilterSimple_Multiple_Line_AA@24")]
        int MultiPrimitive_Line_AA(int Image, struct FLine *Lines, int Color, int Count, float XOffset, float YOffset);
        [entry("_FilterSimple_Multiple_Line_AA@24")]
        int MultiPrimitive_Line_AA_Ptr(int Image, int Lines, int Color, int Count, float XOffset, float YOffset);

        [entry("_RenderPlaneOutlines@24")]
        int MultiPrimitive_Plane_AA(int Image, struct LightingPlane2 *Planes, int Color, int Count, float XOffset, float YOffset);
        [entry("_RenderPlaneOutlines@24")]
        int MultiPrimitive_Plane_AA_Ptr(int Image, int Planes, int Color, int Count, float XOffset, float YOffset);
        [entry("_RenderPlaneOutlines_Masked@28")]
        int MultiPrimitive_Plane_AA_Masked(int Image, struct LightingPlane2 *Planes, int Mask, int Color, int Count, float XOffset, float YOffset);
        [entry("_RenderPlaneOutlines_Masked@28")]
        int MultiPrimitive_Plane_AA_Masked_Ptr(int Image, int Planes, int Mask, int Color, int Count, float XOffset, float YOffset);

        [entry("_FilterSimple_ConvexPolygon@20")]
        int Primitive_ConvexPolygon(int Image, struct GenericPolygon *Poly, int Color, int Renderer, int RenderArgument);
        [entry("_FilterSimple_ConvexPolygon_Outline@12")]
        int Primitive_ConvexPolygon_Outline(int Image, struct GenericPolygon *Poly, int Color);
        [entry("_FilterSimple_ConvexPolygon_Textured@24")]
        int Primitive_ConvexPolygon_Textured(int Image, int Texture, struct GenericPolygon *Poly, int Scaler, int Renderer, int RenderArgument);
        [entry("_FilterSimple_ConvexPolygon_Gradient@16")]
        int Primitive_ConvexPolygon_Gradient(int Image, struct GenericPolygon *Poly, int Renderer, int RenderArgument);
        [entry("_FilterSimple_ConvexPolygon_AntiAlias@20")]
        int Primitive_ConvexPolygon_AntiAlias(int Image, struct GenericPolygon *Poly, int Color, int Renderer, int RenderArgument);
        [entry("_FilterSimple_ConvexPolygon_Textured_AntiAlias@24")]
        int Primitive_ConvexPolygon_Textured_AntiAlias(int Image, int Texture, struct GenericPolygon *Poly, int Scaler, int Renderer, int RenderArgument);

        [entry("_FilterSimple_RenderStroke@16")]
        int Primitive_Stroke(int Image, struct Stroke *Stroke, int Renderer, int RenderArgument);

        [entry("_FilterSimple_RenderStroke_Bezier@20")]
        int Primitive_Stroke_Bezier(int Image, struct Stroke *Stroke, int Renderer, int RenderArgument, float Accuracy);

        [entry("_FilterSimple_Gradient_Horizontal@16")]
        int Filter_Gradient_Horizontal(int Image, struct Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_Vertical@16")]
        int Filter_Gradient_Vertical(int Image, struct Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_4Point@24")]
        int Filter_Gradient_4Point(int Image, struct Rectangle *Area, int Color1, int Color2, int Color3, int Color4);
        [entry("_FilterSimple_Gradient_Radial@16")]
        int Filter_Gradient_Radial(int Image, struct Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_Radial_Ex@24")]
        int Filter_Gradient_Radial_Ex(int Image, struct Rectangle *Area, int Color1, int Color2, float StartOffset, float EndOffset);
        [entry("_FilterSimple_Gradient_4Edge@24")]
        int Filter_Gradient_4Edge(int Image, struct Rectangle *Area, int Edge1, int Edge2, int Edge3, int Edge4);

        [entry("_FilterSimple_Gradient_Horizontal_SourceAlpha@16")]
        int Filter_Gradient_Horizontal_SourceAlpha(int Image, struct Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_Vertical_SourceAlpha@16")]
        int Filter_Gradient_Vertical_SourceAlpha(int Image, struct Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_4Point_SourceAlpha@24")]
        int Filter_Gradient_4Point_SourceAlpha(int Image, struct Rectangle *Area, int Color1, int Color2, int Color3, int Color4);
        [entry("_FilterSimple_Gradient_Radial_SourceAlpha@16")]
        int Filter_Gradient_Radial_SourceAlpha(int Image, struct Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_Radial_SourceAlpha_Ex@24")]
        int Filter_Gradient_Radial_SourceAlpha_Ex(int Image, struct Rectangle *Area, int Color1, int Color2, float StartOffset, float EndOffset);
    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Filters")]
    module Filters {

        [entry("_FilterSimple_ColorFilter@12")]
        int Filter_ColorFilter(int Image, struct Rectangle *Area, struct ColorFilter *Filter);

        [entry("_FilterSimple_Fill@12")]
        int Filter_Fill_Pointer(int Image, int pArea, int Color);

        [entry("_FilterSimple_Fill@12")]
        int Filter_Fill(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Fill_Opacity@16")]
        int Filter_Fill_Opacity(int Image, struct Rectangle *Area, int Color, int Opacity);
        [entry("_FilterSimple_Fill_SourceAlpha@12")]
        int Filter_Fill_SourceAlpha(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Fill_SourceAlpha_Opacity@16")]
        int Filter_Fill_SourceAlpha_Opacity(int Image, struct Rectangle *Area, int Color, int Opacity);
        [entry("_FilterSimple_Fill_Additive@12")]
        int Filter_Fill_Additive(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Fill_Additive_Opacity@16")]
        int Filter_Fill_Additive_Opacity(int Image, struct Rectangle *Area, int Color, int Opacity);
        [entry("_FilterSimple_Fill_Subtractive@12")]
        int Filter_Fill_Subtractive(int Image, struct Rectangle *Area, int Color);
        [entry("_FilterSimple_Fill_Subtractive_Opacity@16")]
        int Filter_Fill_Subtractive_Opacity(int Image, struct Rectangle *Area, int Color, int Opacity);
        [entry("_FilterSimple_Fill_Channel@16")]
        int Filter_Fill_Channel(int Image, struct Rectangle *Area, enum ColorChannels Channel, int Value);

        [entry("_FilterSimple_Grid_SourceAlpha@28")]
        int Filter_Grid_SourceAlpha(int Image, struct Rectangle *Area, int Color, int Width, int Height, int XOffset, int YOffset);

        [entry("_FilterSimple_Composite@12")]
        int Filter_Composite(int Image, struct Rectangle *Area, int Color);

        [entry("_FilterSimple_Premultiply@8")]
        int Filter_Premultiply(int Image, struct Rectangle *Area);

        [entry("_FilterSimple_Blur@16")]
        int Filter_Blur(int Image, struct Rectangle *Area, int XRadius, int YRadius);
        [entry("_FilterSimple_Blur_Horizontal@12")]
        int Filter_Blur_Horizontal(int Image, struct Rectangle *Area, int Radius);
        [entry("_FilterSimple_Blur_Vertical@12")]
        int Filter_Blur_Vertical(int Image, struct Rectangle *Area, int Radius);

        [entry("_FilterSimple_PrepareNormals@8")]
        int Filter_PrepareNormals(int Image, struct Rectangle *Area);

        [entry("_FilterSimple_Swap_Channels@16")]
        int Filter_Swap_Channels(int Image, struct Rectangle *Area, enum ColorChannels Channel1, enum ColorChannels Channel2);

        [entry("_FilterSimple_Grayscale@8")]
        int Filter_Grayscale(int Image, struct Rectangle *Area);

        [entry("_FilterSimple_Invert@8")]
        int Filter_Invert(int Image, struct Rectangle *Area);
        [entry("_FilterSimple_Invert_Color@8")]
        int Filter_Invert_Color(int Image, struct Rectangle *Area);
        [entry("_FilterSimple_Invert_Channel@12")]
        int Filter_Invert_Channel(int Image, struct Rectangle *Area, enum ColorChannels Channel);

        [entry("_FilterSimple_Replace@16")]
        int Filter_Replace(int Image, struct Rectangle *Area, int Find, int Replace);

        [entry("_FilterSimple_Flip@8")]
        int Filter_Flip(int Image, struct Rectangle *Area);
        [entry("_FilterSimple_Mirror@8")]
        int Filter_Mirror(int Image, struct Rectangle *Area);
        [entry("_FilterSimple_Rotate90@4")]
        int Filter_Rotate90(int Image);

        [entry("_FilterSimple_Noise@8")]
        int Filter_Noise(int Image, struct Rectangle *Area);
        [entry("_FilterSimple_Noise_Grayscale@8")]
        int Filter_Noise_Grayscale(int Image, struct Rectangle *Area);
        [entry("_FilterSimple_Noise_Grayscale_Opacity@12")]
        int Filter_Noise_Grayscale_Opacity(int Image, struct Rectangle *Area, int Opacity);
        [entry("_FilterSimple_Noise_Grayscale_Subtractive@8")]
        int Filter_Noise_Grayscale_Subtractive(int Image, struct Rectangle *Area);
        [entry("_FilterSimple_Noise_Grayscale_Subtractive_Opacity@12")]
        int Filter_Noise_Grayscale_Subtractive_Opacity(int Image, struct Rectangle *Area, int Opacity);
        [entry("_FilterSimple_Noise_Channel@12")]
        int Filter_Noise_Channel(int Image, struct Rectangle *Area, enum ColorChannels Channel);

        [entry("_FilterSimple_Decay@12")]
        int Filter_Decay(int Image, struct Rectangle *Area, int Strength);
        [entry("_FilterSimple_Solarize@12")]
        int Filter_Solarize(int Image, struct Rectangle *Area, int Strength);

        [entry("_FilterSimple_Adjust@12")]
        int Filter_Adjust(int Image, struct Rectangle *Area, int Amount);
        [entry("_FilterSimple_Adjust_RGB@20")]
        int Filter_Adjust_RGB(int Image, struct Rectangle *Area, int RedAmount, int GreenAmount, int BlueAmount);
        [entry("_FilterSimple_Adjust_HSV@20")]
        int Filter_Adjust_HSV(int Image, struct Rectangle *Area, int HueAmount, int SaturationAmount, int ValueAmount);
        [entry("_FilterSimple_Adjust_Channel@16")]
        int Filter_Adjust_Channel(int Image, struct Rectangle *Area, enum ColorChannels Channel, int Amount);

        [entry("_FilterSimple_Gamma@12")]
        int Filter_Gamma(int Image, struct Rectangle *Area, float Gamma);
        [entry("_FilterSimple_Gamma_RGB@20")]
        int Filter_Gamma_RGB(int Image, struct Rectangle *Area, float RedGamma, float GreenGamma, float BlueGamma);
        [entry("_FilterSimple_Gamma_Channel@16")]
        int Filter_Gamma_Channel(int Image, struct Rectangle *Area, enum ColorChannels Channel, float Gamma);

        [entry("_FilterSimple_Multiply@12")]
        int Filter_Multiply(int Image, struct Rectangle *Area, float Multiply);
        [entry("_FilterSimple_Multiply_RGB@20")]
        int Filter_Multiply_RGB(int Image, struct Rectangle *Area, float RedMultiply, float GreenMultiply, float BlueMultiply);
        [entry("_FilterSimple_Multiply_Channel@16")]
        int Filter_Multiply_Channel(int Image, struct Rectangle *Area, enum ColorChannels Channel, float Multiply);

        [entry("_FilterSimple_Depalettize@20")]
        int Filter_Depalletize(int Image, struct Rectangle *Area, int Data, int Palette, int Length);
        [entry("_FilterSimple_Depalettize@20")]
        int Filter_Depalettize(int Image, struct Rectangle *Area, int Data, int Palette, int Length);

//        [entry("_BlitDeform_Normal@24")]
//        int Filter_Deformation(int Output, int Input, struct MeshParam *Mesh, struct Rectangle *OutputArea, int InputX, int InputY);

    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Blitters")]
    module Blitters {
        
        [entry("_BlitSimple_Normal@20")]
        int Blit_Normal(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Normal_Opacity@24")]
        int Blit_Normal_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Normal_Tint@24")]
        int Blit_Normal_Tint(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Tint);
        [entry("_BlitSimple_Normal_Tint_Opacity@28")]
        int Blit_Normal_Tint_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Tint, int Opacity);
        [entry("_BlitSimple_Normal_Gamma@24")]
        int Blit_Normal_Gamma(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Gamma);
        [entry("_BlitSimple_Normal_Gamma_Opacity@28")]
        int Blit_Normal_Gamma_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Gamma, int Opacity);

        [entry("_BlitSimple_Compare@20")]
        int Blit_Compare(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);

        [entry("_BlitSimple_Additive@20")]
        int Blit_Additive(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Additive_Opacity@24")]
        int Blit_Additive_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Subtractive@20")]
        int Blit_Subtractive(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Subtractive_Opacity@24")]
        int Blit_Subtractive_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Additive_SourceAlpha@20")]
        int Blit_Additive_SourceAlpha(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Additive_SourceAlpha_Opacity@24")]
        int Blit_Additive_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Subtractive_SourceAlpha@20")]
        int Blit_Subtractive_SourceAlpha(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Subtractive_SourceAlpha_Opacity@24")]
        int Blit_Subtractive_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Unerase@20")]
        int Blit_Unerase(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Unerase_Opacity@24")]
        int Blit_Unerase_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Erase@20")]
        int Blit_Erase(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Erase_Opacity@24")]
        int Blit_Erase_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Screen@20")]
        int Blit_Screen(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Screen_Opacity@24")]
        int Blit_Screen_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Multiply@20")]
        int Blit_Multiply(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Multiply_Opacity@24")]
        int Blit_Multiply_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Matte@20")]
        int Blit_Matte(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Matte_Opacity@24")]
        int Blit_Matte_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Matte_Tint@24")]
        int Blit_Matte_Tint(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Tint);
        [entry("_BlitSimple_Matte_Tint_Opacity@28")]
        int Blit_Matte_Tint_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Tint, int Opacity);

        [entry("_BlitSimple_SourceAlpha@20")]
        int Blit_SourceAlpha(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_SourceAlpha_Opacity@24")]
        int Blit_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_SourceAlpha_Premultiplied@20")]
        int Blit_SourceAlpha_Premultiplied(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_SourceAlpha_Premultiplied_Opacity@24")]
        int Blit_SourceAlpha_Premultiplied_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_BlitBehind@20")]
        int Blit_Behind(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_BlitBehind_Opacity@24")]
        int Blit_Behind_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Dodge@20")]
        int Blit_Dodge(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Dodge_Opacity@24")]
        int Blit_Dodge_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Burn@20")]
        int Blit_Burn(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Burn_Opacity@24")]
        int Blit_Burn_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Merge@20")]
        int Blit_Merge(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Merge_Opacity@24")]
        int Blit_Merge_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Automatic_Matte_Opacity@24")]
        int Blit_Automatic_Matte_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Automatic_SourceAlpha_Opacity@24")]
        int Blit_Automatic_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_SourceAlpha_Tint@24")]
        int Blit_SourceAlpha_Tint(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Tint);
        [entry("_BlitSimple_SourceAlpha_Tint_Opacity@28")]
        int Blit_SourceAlpha_Tint_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Tint, int Opacity);
        
        [entry("_BlitSimple_SourceAlpha_ColorMask@24")]
        int Blit_SourceAlpha_ColorMask(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Mask);

        [entry("_BlitSimple_AND@20")]
        int Blit_AND(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);        
        [entry("_BlitSimple_OR@20")]
        int Blit_OR(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_XOR@20")]
        int Blit_XOR(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Difference@20")]
        int Blit_Difference(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);

        [entry("_BlitSimple_Dither@20")]
        int Blit_Dither(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Dither_Opacity@24")]
        int Blit_Dither_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Dither_DualOpacity@28")]
        int Blit_Dither_DualOpacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity, int Opacity2);

        [entry("_BlitSimple_Lightmap@20")]
        int Blit_Lightmap(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Lightmap_Opacity@24")]
        int Blit_Lightmap_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Lightmap_RGB@20")]
        int Blit_Lightmap_RGB(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Lightmap_RGB_Opacity@24")]
        int Blit_Lightmap_RGB_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Font@24")]
        int Blit_Font(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_Opacity@28")]
        int Blit_Font_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);

        [entry("_BlitSimple_Font_SourceAlpha@24")]
        int Blit_Font_SourceAlpha(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_SourceAlpha_RGB@24")]
        int Blit_Font_SourceAlpha_RGB(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_SourceAlpha_Opacity@28")]
        int Blit_Font_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);
        [entry("_BlitSimple_Font_SourceAlpha_RGB_Opacity@28")]
        int Blit_Font_SourceAlpha_RGB_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);

        [entry("_BlitSimple_Font_Merge_RGB@24")]
        int Blit_Font_Merge_RGB(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_Merge_RGB_Opacity@28")]
        int Blit_Font_Merge_RGB_Opacity(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);

        [entry("_BlitSimple_NormalMap@28")]
        int Blit_NormalMap(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, struct FPoint3* LightVector, int LightColor);
        [entry("_BlitSimple_NormalMap_Additive@28")]
        int Blit_NormalMap_Additive(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, struct FPoint3* LightVector, int LightColor);
        [entry("_BlitSimple_NormalMap_SourceAlpha@28")]
        int Blit_NormalMap_SourceAlpha(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, struct FPoint3* LightVector, int LightColor);
        [entry("_BlitSimple_NormalMap_Additive_SourceAlpha@28")]
        int Blit_NormalMap_Additive_SourceAlpha(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, struct FPoint3* LightVector, int LightColor);

        [entry("_BlitMask_Normal_Opacity@36")]
        int Blit_Mask_Normal_Opacity(int Dest, int Source, int Mask, struct Rectangle *Rect, int SourceX, int SourceY, int MaskX, int MaskY, int Opacity);
        [entry("_BlitMask_SourceAlpha_Opacity@36")]
        int Blit_Mask_SourceAlpha_Opacity(int Dest, int Source, int Mask, struct Rectangle *Rect, int SourceX, int SourceY, int MaskX, int MaskY, int Opacity);
        [entry("_BlitMask_Merge_Opacity@36")]
        int Blit_Mask_Merge_Opacity(int Dest, int Source, int Mask, struct Rectangle *Rect, int SourceX, int SourceY, int MaskX, int MaskY, int Opacity);

        [entry("_BlitTile_Normal@12")]
        int Blit_Tile_Normal(int Dest, int Source, struct Rectangle *Rect);
        [entry("_BlitTile_Normal_Opacity@16")]
        int Blit_Tile_Normal_Opacity(int Dest, int Source, struct Rectangle *Rect, int Opacity);
        [entry("_BlitTile_Matte@12")]
        int Blit_Tile_Matte(int Dest, int Source, struct Rectangle *Rect);
        [entry("_BlitTile_Matte_Opacity@16")]
        int Blit_Tile_Matte_Opacity(int Dest, int Source, struct Rectangle *Rect, int Opacity);
        [entry("_BlitTile_SourceAlpha@12")]
        int Blit_Tile_SourceAlpha(int Dest, int Source, struct Rectangle *Rect);
        [entry("_BlitTile_SourceAlpha_Opacity@16")]
        int Blit_Tile_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, int Opacity);
        [entry("_BlitTile_Matte_Tint@16")]
        int Blit_Tile_Matte_Tint(int Dest, int Source, struct Rectangle *Rect, int Tint);
        [entry("_BlitTile_Matte_Tint_Opacity@20")]
        int Blit_Tile_Matte_Tint_Opacity(int Dest, int Source, struct Rectangle *Rect, int Tint, int Opacity);
        [entry("_BlitTile_SourceAlpha_Tint@16")]
        int Blit_Tile_SourceAlpha_Tint(int Dest, int Source, struct Rectangle *Rect, int Tint);
        [entry("_BlitTile_SourceAlpha_Tint_Opacity@20")]
        int Blit_Tile_SourceAlpha_Tint_Opacity(int Dest, int Source, struct Rectangle *Rect, int Tint, int Opacity);
        [entry("_BlitTile_Merge@12")]
        int Blit_Tile_Merge(int Dest, int Source, struct Rectangle *Rect);
        [entry("_BlitTile_Merge_Opacity@16")]
        int Blit_Tile_Merge_Opacity(int Dest, int Source, struct Rectangle *Rect, int Opacity);
        [entry("_BlitTile_Additive@12")]
        int Blit_Tile_Additive(int Dest, int Source, struct Rectangle *Rect);
        [entry("_BlitTile_Additive_Opacity@16")]
        int Blit_Tile_Additive_Opacity(int Dest, int Source, struct Rectangle *Rect, int Opacity);
        [entry("_BlitTile_Subtractive@12")]
        int Blit_Tile_Subtractive(int Dest, int Source, struct Rectangle *Rect);
        [entry("_BlitTile_Subtractive_Opacity@16")]
        int Blit_Tile_Subtractive_Opacity(int Dest, int Source, struct Rectangle *Rect, int Opacity);
        [entry("_BlitTile_Multiply@12")]
        int Blit_Tile_Multiply(int Dest, int Source, struct Rectangle *Rect);
        [entry("_BlitTile_Multiply_Opacity@16")]
        int Blit_Tile_Multiply_Opacity(int Dest, int Source, struct Rectangle *Rect, int Opacity);
        [entry("_BlitTile_Font_Merge_Opacity@20")]
        int Blit_Tile_Font_Merge_Opacity(int Dest, int Source, struct Rectangle *Rect, int Tint, int Opacity);
        [entry("_BlitTile_Font_SourceAlpha_Opacity@20")]
        int Blit_Tile_Font_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, int Tint, int Opacity);
        [entry("_BlitTile_Font_Opacity@20")]
        int Blit_Tile_Font_Opacity(int Dest, int Source, struct Rectangle *Rect, int Tint, int Opacity);
        
        [entry("_BlitResample_Normal@20")]
        int Blit_Resample_Normal(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Normal_Opacity@24")]
        int Blit_Resample_Normal_Opacity(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Opacity);
        
        [entry("_BlitResample_Multiply@20")]
        int Blit_Resample_Multiply(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Multiply_Opacity@24")]
        int Blit_Resample_Multiply_Opacity(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Opacity);
        
        [entry("_BlitResample_Lightmap@20")]
        int Blit_Resample_Lightmap(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Lightmap_RGB@20")]
        int Blit_Resample_Lightmap_RGB(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);

        [entry("_BlitResample_SourceAlpha@20")]
        int Blit_Resample_SourceAlpha(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_SourceAlpha_Opacity@24")]
        int Blit_Resample_SourceAlpha_Opacity(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Opacity);

        [entry("_BlitResample_Merge@20")]
        int Blit_Resample_Merge(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Merge_Opacity@24")]
        int Blit_Resample_Merge_Opacity(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Opacity);

        [entry("_BlitResample_SourceAlpha_Tint@24")]
        int Blit_Resample_SourceAlpha_Tint(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Tint);
        [entry("_BlitResample_SourceAlpha_Tint_Opacity@28")]
        int Blit_Resample_SourceAlpha_Tint_Opacity(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Tint, int Opacity);

        [entry("_BlitResample_Additive@20")]
        int Blit_Resample_Additive(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Additive_Opacity@24")]
        int Blit_Resample_Additive_Opacity(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Opacity);

        [entry("_BlitResample_Subtractive@20")]
        int Blit_Resample_Subtractive(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Subtractive_Opacity@24")]
        int Blit_Resample_Subtractive_Opacity(int Dest, int Source, struct Rectangle *Rect, struct Rectangle *SourceRect, int Scaler, int Opacity);
        
        [entry("_BlitSimple_Channel@28")]
        int Blit_Channel(int Dest, int Source, struct Rectangle *Rect, int SourceX, int SourceY, int DestChannel, int SourceChannel);
        
        [entry("_BlitDeform@32")]
        int Blit_Deform(int Dest, int Source, struct MeshParam *Mesh, struct Rectangle *DestRect, struct Rectangle *SourceRect, int Color, int Renderer, int Scaler);
        [entry("_BlitDeformMask@44")]
        int Blit_Mask_Deform(int Dest, int Source, int Mask, struct MeshParam *Mesh, struct Rectangle *DestRect, struct Rectangle *SourceRect, struct Rectangle *MaskRect, int Color, int Opacity, int Renderer, int Scaler);

        [entry("_BlitConvolve@32")]
        int Blit_Convolve(int Dest, int Source, int Filter, struct Rectangle *DestRect, int SourceX, int SourceY, int RenderArgument, int Renderer);
        [entry("_BlitConvolveMask@44")]
        int Blit_Mask_Convolve(int Dest, int Source, int Mask, int Filter, struct Rectangle *DestRect, int SourceX, int SourceY, int MaskX, int MaskY, int RenderArgument, int Renderer);
    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Utility Functions")]
    module Utility {

        [entry("_AllocateSharedMemory@8")]
        int AllocateSharedMemory(int Size, [string] char* ID);
        [entry("_DeallocateSharedMemory@4")]
        int DeallocateSharedMemory(int Pointer);

        [entry("_AllocateMemory@4")]
        int AllocateMemory(int Size);
        [entry("_DeallocateMemory@4")]
        int DeallocateMemory(int Pointer);

        [entry("_PointInsidePolygon@8")]
		    int PointInsidePolygon(struct GenericPolygon *Poly, struct FPoint *Point);

        [entry("_ClipByte@4")]
        int ClipByte(int Value);
        [entry("_ClipValue@12")]
        int ClipValue(int Value, int Minimum, int Maximum);
        [entry("_WrapValue@12")]
        int WrapValue(int Value, int Minimum, int Maximum);
        [entry("_Floor@4")]
        int Floor(float Value);
        [entry("_Ceil@4")]
        int Ceil(float Value);
        [entry("_FloorF@4")]
        float FloorF(float Value);
        [entry("_CeilF@4")]
        float CeilF(float Value);

        [entry("_Interpolate@12")]
        float Interpolate(float a, float b, float x);

        [entry("_CosineInterpolate@12")]
        float CosineInterpolate(float a, float b, float x);
        
        [entry("_CubicInterpolate@20")]
        float CubicInterpolate(float a, float b, float c, float d, float x);

        [entry("_ReadUShort@4")]
        int ReadUShort([in] int Pointer);

        [entry("_AddUInts@8")]
        int AddUInts([in] int A, [in] int B);
        [entry("_SubtractUInts@8")]
        int SubtractUInts([in] int A, [in] int B);

        [entry("_FillMemoryI8@12")]
        int FillMemoryByte([in] int Pointer, [in] byte Value, [in] int Count);
        [entry("_FillMemoryI16@12")]
        int FillMemoryShort([in] int Pointer, [in] short Value, [in] int Count);
        [entry("_FillMemoryI32@12")]
        int FillMemoryInteger([in] int Pointer, [in] int Value, [in] int Count);

        [entry("_CopyBytes@12")]
        int CopyBytes([in] int DestPointer, [in] int SourcePointer, [in] int Count);

        [entry("_GetStringLength@4")]
        int GetStringLength(int String);
        [entry("_StringCopy@8")]
        int StringCopy(int Dest, int Source);

        [entry("_ShiftLeft@8")]
        int ShiftLeft(int Value, int Bits);
        [entry("_ShiftRight@8")]
        int ShiftRight(int Value, int Bits);
        [entry("_Bitmask@8")]
        int Bitmask(int Start, int Count);
        [entry("_MaskBits@12")]
        int MaskBits(int Value, int Start, int Count);

        [entry("_Depalettize@20")]
        int Depalettize(int Dest, int Source, int Palette, int BPP, int Count);
        [entry("_PlanarDepalettize@24")]
        int PlanarDepalettize(int Dest, int Source, int Palette, int BPP, int Planes, int Count);

        [entry("_AngleInRange@12")]
        int AngleInRange(float Start, float End, float Angle);

        [entry("_ClipLine@8")]
        int ClipLine(int Image, struct ILine* Line);
        [entry("_ClipFloatLine@8")]
        int ClipFLine(int Image, struct FLine* Line);

        [entry("_GetBilinearScaler@0")]
        int GetBilinearScaler();
        [entry("_GetLinearScaler@0")]
        int GetLinearScaler();
        [entry("_GetBilinearWrapScaler@0")]
        int GetBilinearWrapScaler();
        [entry("_GetLinearWrapScaler@0")]
        int GetLinearWrapScaler();
        [entry("_GetBilinearClampScaler@0")]
        int GetBilinearClampScaler();
        [entry("_GetLinearClampScaler@0")]
        int GetLinearClampScaler();

        [entry("_SetDefaultSampleFunction@4")]
        void SetDefaultSampleFunction(int Scaler);

        [entry("_GetSourceAlphaRenderer@0")]
        int GetSourceAlphaRenderer();
        [entry("_GetPremultipliedSourceAlphaRenderer@0")]
        int GetPremultipliedSourceAlphaRenderer();
        [entry("_GetAdditiveRenderer@0")]
        int GetAdditiveRenderer();
        [entry("_GetScreenRenderer@0")]
        int GetScreenRenderer();
        [entry("_GetSubtractiveRenderer@0")]
        int GetSubtractiveRenderer();
        [entry("_GetShadowRenderer@0")]
        int GetShadowRenderer();
        [entry("_GetMergeRenderer@0")]
        int GetMergeRenderer();  
        [entry("_GetAdditiveSourceAlphaRenderer@0")]
        int GetAdditiveSourceAlphaRenderer();
        [entry("_GetSubtractiveSourceAlphaRenderer@0")]
        int GetSubtractiveSourceAlphaRenderer();
        [entry("_GetFontSourceAlphaRenderer@0")]
        int GetFontSourceAlphaRenderer();
        [entry("_GetEraseRenderer@0")]
        int GetEraseRenderer();
        [entry("_GetUneraseRenderer@0")]
        int GetUneraseRenderer();

        [entry("_GetPolygonVertexCount@4")]
        int GetPolygonVertexCount(int Pointer);
        [entry("_GetGradientPolygonVertexCount@4")]
        int GetGradientPolygonVertexCount(int Pointer);
        [entry("_GetTexturedPolygonVertexCount@4")]
        int GetTexturedPolygonVertexCount(int Pointer);

        [entry("_GetPolygonVertexPointer@8")]
        int GetPolygonVertexPointer(int Pointer, int Index);
        [entry("_GetGradientPolygonVertexPointer@8")]
        int GetGradientPolygonVertexPointer(int Pointer, int Index);
        [entry("_GetTexturedPolygonVertexPointer@8")]
        int GetTexturedPolygonVertexPointer(int Pointer, int Index);

        [entry("_GetPolygonBounds@8")]
        int GetPolygonBounds(int Pointer, [out] struct FRect *Rect);

        [entry("_PointInsidePolygon@8")]
        int PointIntersectsPolygon(int Polygon, [in] struct FPoint *Point);
        [entry("_PolygonIntersectsPolygon@8")]
        int PolygonIntersectsPolygon(int PolygonA, int PolygonB);

        [entry("_SeedMersenne@4")]
        void SeedMersenne(int Seed);
        [entry("_GetMersenneValue@0")]
        int GetMersenneValue();
        [entry("_GetMersenneValueFloat@0")]
        float GetMersenneValueFloat();

        [entry("_GetTime@0")]
        double GetTime();
    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Particle Functions")]
    module Particles {
        [entry("_CreateParticleEngine@0")]
        int CreateParticleEngine();
        [entry("_EmptyParticleEngine@4")]
        int EmptyParticleEngine(int Engine);
        [entry("_DestroyParticleEngine@4")]
        int DestroyParticleEngine(int Engine);

        [entry("_AddParticleModifier@8")]
        int AddParticleModifier(int Engine, struct ParticleModifier *NewModifier);
        [entry("_RemoveParticleModifier@8")]
        int RemoveParticleModifier(int Engine, struct ParticleModifier *Modifier);

        [entry("_AddParticleGenerator@8")]
        int AddParticleGenerator(int Engine, struct ParticleGenerator *NewGenerator);
        [entry("_RemoveParticleGenerator@8")]
        int RemoveParticleGenerator(int Engine, struct ParticleGenerator *Generator);

        [entry("_AddParticleType@8")]
        int AddParticleType(int Engine, struct ParticleType *NewType);
        [entry("_RemoveParticleType@8")]
        int RemoveParticleType(int Engine, struct ParticleType *Type);

        [entry("_SpawnParticle@8")]
        int SpawnParticle(int Engine, struct Particle *NewParticle);

        [entry("_TickGenerator@12")]
        int TickGenerator(int Engine, struct ParticleGenerator *Generator, float ElapsedTime);

        [entry("_GetParticleCount@8")]
        int GetParticleCount(int Engine, int Type);

        [entry("_UpdateParticleEngine@8")]
        int UpdateParticleEngine(int Engine, float ElapsedTime);

        [entry("_SetParticleEngineSize@8")]
        int SetParticleEngineSize(int Engine, struct FRect *Size);
        [entry("_SetParticleEngineCollisionMatrix@8")]
        int SetParticleEngineCollisionMatrix(int Engine, int Matrix);
        [entry("_SetParticleEngineSprites@8")]
        int SetParticleEngineSprites(int Engine, int FirstSprite);

        [entry("_RenderParticleEngine@8")]
        int RenderParticleEngine(int Engine, struct ParticleCamera *Camera);
    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Color Functions")]
    module Color {

        [entry("_BGRA@16")]
        int BGRA(int Red, int Green, int Blue, int Alpha);
        [entry("_BGR@12")]
        int BGR(int Red, int Green, int Blue);
        [entry("_RGBA@16")]
        int RGBA(int Red, int Green, int Blue, int Alpha);
        [entry("_RGB@12")]
        int RGB(int Red, int Green, int Blue);
        [entry("_HSVAColor@16")]
        int HSVA(int Hue, int Saturation, int Value, int Alpha);
        [entry("_GrayA@8")]
        int GrayA(int Gray, int Alpha);
        [entry("_Gray@4")]
        int Gray(int Gray);

        [entry("_NormalColor@4")]
        int NormalColor(struct FPoint3* Vector);

        [entry("_BlendColors@12")]
        int BlendColors(int Dest, int Source, int Alpha);
        [entry("_MultiplyColor@12")]
        int MultiplyColor(int Color, int Mul, int Alpha);

        [entry("_GetAlpha@4")]
        int GetAlpha(int Color);
        [entry("_GetRed@4")]
        int GetRed(int Color);
        [entry("_GetGreen@4")]
        int GetGreen(int Color);
        [entry("_GetBlue@4")]
        int GetBlue(int Color);
        [entry("_GetGray@4")]
        int GetGray(int Color);

        [entry("_SetAlpha@8")]
        int SetAlpha(int Color, int Value);
        [entry("_SetRed@8")]
        int SetRed(int Color, int Value);
        [entry("_SetGreen@8")]
        int SetGreen(int Color, int Value);
        [entry("_SetBlue@8")]
        int SetBlue(int Color, int Value);
        [entry("_SetGray@8")]
        int SetGray(int Color, int Value);

        [entry("_SetChannel@12")]
        int SetChannel(int Color, enum ColorChannels Channel, int Value);
        [entry("_GetChannel@8")]
        int GetChannel(int Color, enum ColorChannels Channel);
        [entry("_SwapChannels@12")]
        int SwapChannels(int Color, enum ColorChannels Channel1, enum ColorChannels Channel2);

        [entry("_ColorToGrayscale@4")]
        int ColorToGrayscale(int Color);
        [entry("_InvertColor@4")]
        int InvertColor(int Color);
        [entry("_InvertColorRGB@4")]
        int InvertColorRGB(int Color);
        [entry("_InvertChannel@8")]
        int InvertChannel(int Color, enum ColorChannels Channel);

        [entry("_HSVAToColor@4")]
        int HSVAToColor(struct HSVA *In);
        [entry("_ColorToHSVA@8")]
        void ColorToHSVA(int In, struct HSVA *Out);

        [entry("_GetHue@4")]
        int GetHue(int Color);
        [entry("_GetSaturation@4")]
        int GetSaturation(int Color);
        [entry("_GetHSVAValue@4")]
        int GetHSVAValue(int Color);
        [entry("_SetHue@8")]
        int SetHue(int Color, int Value);
        [entry("_SetSaturation@8")]
        int SetSaturation(int Color, int Value);
        [entry("_SetHSVAValue@8")]
        int SetHSVAValue(int Color, int Value);
    }

    [dllname("SoftFX.DLL"), helpstring("Fury2 Graphics Functions")]
    module Fury2Engine {

        [entry("_RenderSprites@12")]
        int RenderSprites(int FirstSprite, struct CameraParam *Camera, struct RenderSpritesParam *Options);
        [entry("_UpdateSprites@8")]
        int UpdateSprites(int FirstSprite, struct SpriteEngineOptions *Options);
        [entry("_SortSprites@4")]
        int SortSprites(int FirstSprite);
        [entry("_CullSprites@8")]
        int CullSprites(int FirstSprite, struct CameraParam *Camera);
        [entry("_IterateSprites@8")]
        int IterateSprites(int FirstSprite, int IteratorFunction);
        [entry("_FillSpriteMatrix@8")]
        int FillSpriteMatrix(int FirstSprite, int Matrix);

        [entry("_CollisionCheck@20")]
        int CollisionCheck(int FirstSprite, int CheckSprite, int MustBeSolid, int RequiredType, int ExcludedType);
        [entry("_FindSprite@24")]
        int FindSprite(int FirstSprite, struct FRect *Area, int ExcludedSprite, int MustBeSolid, int RequiredType, int ExcludedType);
        [entry("_FindSpriteOnscreen@24")]
        int FindSpriteOnscreen(int FirstSprite, struct FRect *Area, int ExcludedSprite, int MustBeSolid, int RequiredType, int ExcludedType);

        [entry("_GetClosestSprite@24")]
        int GetClosestSprite(int FirstSprite, int CheckSprite, int MustBeSolid, int RequiredType, int ExcludedType, float *OutDistance);
        [entry("_GetFarthestSprite@24")]
        int GetFarthestSprite(int FirstSprite, int CheckSprite, int MustBeSolid, int RequiredType, int ExcludedType, float *OutDistance);

        [entry("_CheckLineCollide@12")]
        int CheckLineCollide(struct FRect *Region, int Lines, int LineCount);

        [entry("_RenderTilemapLayer@8")]
        int RenderTilemapLayer(struct TilemapLayerParam *Layer, struct CameraParam *Camera);
        [entry("_RenderMap@16")]
        int RenderMap(struct Map *Map, struct MapCamera *Camera, int FlipCallback, int BackgroundCallback);

        [entry("_RenderWindow@16")]
        int RenderWindow(int Image, struct Rectangle *Area, struct WindowSkinParam *Skin, int SectionFlags);

        [entry("_RenderText@20")]
        int RenderText([string] wchar_t* Text, int Dest, struct Rectangle *Rect, struct FontParam *Font, struct TextParam *Options);

        [entry("_RenderLightingEnvironment@8")]
        int RenderLightingEnvironment(struct LightingCamera *Camera, struct LightingEnvironment *Environment);

        [entry("_RenderCollisionLines@20")]
        int RenderCollisionLines(int Image, int Lines, int Count, float XOffset, float YOffset);
        [entry("_RenderLines_Masked@28")]
        int RenderLines_Masked(int Image, int Lines, int Mask, int Color, int Count, float XOffset, float YOffset);
        [entry("_SelectLines@24")]
        int SelectLines(struct Rectangle *Area, int Lines, int Mask, int Count, float XOffset, float YOffset);
        [entry("_SelectPlanes@24")]
        int SelectPlanes(struct Rectangle *Area, int Planes, int Mask, int Count, float XOffset, float YOffset);

        [entry("_AllocateTileset@12")]
        int AllocateTileset(int Image, int TileWidth, int TileHeight);
        [entry("_AllocateEmptyTileset@12")]
        int AllocateEmptyTileset(int TileCount, int TileWidth, int TileHeight);
        [entry("_GetTile@8")]
        int GetTile(int Tileset, int Index);
        [entry("_GetTileWidth@4")]
        int GetTileWidth(int Tileset);
        [entry("_GetTileHeight@4")]
        int GetTileHeight(int Tileset);
        [entry("_GetTileCount@4")]
        int GetTileCount(int Tileset);
        [entry("_SetTile@12")]
        void SetTile(int Tileset, int Index, int NewTile);
        [entry("_ReplaceTile@12")]
        void ReplaceTile(int Tileset, int Index, int NewTile);
        [entry("_AddTile@8")]
        void AddTile(int Tileset, int NewTile);
        [entry("_InsertTile@12")]
        void InsertTile(int Tileset, int NewTile, int Index);
        [entry("_RemoveTile@8")]
        void RemoveTile(int Tileset, int Index);
        [entry("_DeallocateTileset@4")]
        int DeallocateTileset(int Tileset);
        [entry("_RefTileset@4")]
        int RefTileset(int Tileset);
        [entry("_DerefTileset@4")]
        int DerefTileset(int Tileset);
        [entry("_PremultiplyTileset@4")]
        int PremultiplyTileset(int Tileset);
        [entry("_SetTilesetPremultiplied@8")]
        int SetTilesetPremultiplied(int Tileset, int Premultiplied);

        [entry("_SetShadowImage@4")]
        void SetShadowImage(int Image);

        [entry("_SetMesh@12")]
        int SetMesh(struct MeshParam *Mesh, float X, float Y);
        [entry("_ScaleMesh@12")]
        int ScaleMesh(struct MeshParam *Mesh, float X, float Y);
        [entry("_TranslateMesh@12")]
        int TranslateMesh(struct MeshParam *Mesh, float X, float Y);
        [entry("_RandomizeMesh@20")]
        int RandomizeMesh(struct MeshParam *Mesh, float XOffset, float YOffset, float XScale, float YScale);
        [entry("_MeshFromHeightmap@16")]
        int MeshFromHeightmap(struct MeshParam *Mesh, int Source, float Scale, struct Rectangle* SourceRect);

        [entry("_CreateCollisionMatrix@8")]
        int CreateCollisionMatrix(int Width, int Height);
        [entry("_CreateCollisionMatrixEx@16")]
        int CreateCollisionMatrixEx(int Width, int Height, int SectorWidth, int SectorHeight);
        [entry("_AppendLinesToCollisionMatrix@12")]
        int AppendLinesToCollisionMatrix(int Matrix, struct FLine *Lines, int Count);
        [entry("_EraseCollisionMatrix@4")]
        int EraseCollisionMatrix(int Matrix);
        [entry("_DeleteCollisionMatrix@4")]
        int DeleteCollisionMatrix(int Matrix);

        [entry("_CreateLightingMatrix@8")]
        int CreateLightingMatrix(int Width, int Height);
        [entry("_AppendObstructionsToLightingMatrix@12")]
        int AppendObstructionsToLightingMatrix(int Matrix, struct LightingObstruction *Lines, int Count);
        [entry("_EraseLightingMatrix@4")]
        int EraseLightingMatrix(int Matrix);
        [entry("_DeleteLightingMatrix@4")]
        int DeleteLightingMatrix(int Matrix);

        [entry("_SightCheck@28")]
        int SightCheck(struct LightingEnvironment *Environment, float FromX, float FromY, float ToX, float ToY, int IgnoreSprite, int IgnoreSprite2);
        [entry("_RaycastPoint@20")]
        int RaycastPoint(struct LightingEnvironment *Environment, float X, float Y, int IgnoreSprite);

    }

    [dllname("SoftFX.DLL"), helpstring("Fury2 Profiler")]
    module Profiler {

        [entry("_ProfileStart@4")]
        void ProfileStart([string] char* Name);
        [entry("_ProfileStop@4")]
        void ProfileStop([string] char* Name);
        [entry("_ProfileReset@0")]
        void ProfileReset();
        [entry("_ProfileUpdate@0")]
        void ProfileUpdate();
        [entry("_SetProfilerCallbacks@12")]
        void SetProfilerCallbacks(int ResetCallback, int PrintCallback, int QueryCallback);
    }

    struct OverrideHeader {
        const int ParameterCount;
        const int KeyPointer;
        const int Index;
    };

    struct GenericOverrideParameters {
        struct OverrideHeader Header;
        const int Parameters[16];
    };

    struct Image_Operation_Parameters {
        struct OverrideHeader Header;
        const int Image;
        // optional
        const int P2;
        const int P3;
        const int P4;
        const int P5;
        const int P6;
        const int P7;
        const int P8;
    };

    struct Image_Fill_Parameters {
        struct OverrideHeader Header;
        const int Image;
        const int Color;
        // optional
        const int Rectangle;
    };

    struct Image_Copy_Parameters {
        struct OverrideHeader Header;
        const int Image;
        const int Color;
        // optional
        const int Left;
        const int Top;
        const int Width;
        const int Height;
    };

    struct Image_Allocate_Parameters {
        struct OverrideHeader Header;
        const int Image;      
        const int Width;
        const int Height;
    };

    struct Image_Rotate_Parameters {
        struct OverrideHeader Header;
        const int Image;      
        const float Angle;
        const int Scaler;
    };

    struct ResampleImage_Parameters {
        struct OverrideHeader Header;
        const int Source;       
        const int Target;
    };

    struct Image_SetPixelAA_Parameters {
        struct OverrideHeader Header;
        const int Image;
        const int X;
        const int Y;
        const int XFraction;
        const int YFraction;
        const int Color;
    };

    struct Image_GetPixels_Parameters {
        struct OverrideHeader Header;
        const int Image;
        const int Left;
        const int Top;
        const int Width;
        const int Height;
        const void* OutputPointer;
    };

    struct BlitSimple_Parameters {
        struct OverrideHeader Header;
        const int Dest;
        const int Source;
        const int Rectangle;
        const int SX;
        const int SY;
        // optional
        const int P6;
        const int P7;
        const int P8;
        const int P9;
    };

    struct FilterSimple_Parameters {
        struct OverrideHeader Header;
        const int Image;
        const int Rectangle;
        // optional
        const int P3;
        const int P4;
        const int P5;
        const int P6;
        const int P7;
        const int P8;
        const int P9;
    };

    struct BlitResample_Parameters {
        struct OverrideHeader Header;
        const int DestImage;
        const int SourceImage;
        const int DestRectangle;
        const int SourceRectangle;
        const int Scaler;
        // optional
        const int P6;
        const int P7;
        const int P8;
        const int P9;
        const int P10;
    };

    struct BlitMask_Parameters {
        struct OverrideHeader Header;
        const int DestImage;
        const int SourceImage;
        const int MaskImage;
        const int Rectangle;
        const int SourceX;
        const int SourceY;
        const int MaskX;
        const int MaskY;
        // optional
        const int P9;
        const int P10;
        const int P11;
        const int P12;
        const int P13;
    };

    [dllname("SoftFX.dll"), helpstring("Fury2 Override System")]
    module Overrides {
/* For some reason this part of the TLB is generated incorrectly and causes VB to corrupt DLLs and EXEs. */
//        [entry("_AddOverride@8")]
//        int AddOverride(int Key, int Address);
//        [entry("_AddOverrideAtBack@8")]
//        int AddOverrideAtBack(int Key, int Address);
//        [entry("_RemoveOverride@8")]
//        int RemoveOverride(int Key, int Address);
//        [entry("_GetOverrideCount@4")]
//        int GetOverrideCount(int Key);
//        [entry("_KeyMatches@8")]
//        int KeyMatches(int KeyPointer, [string, in] const char* Match);
    }
}
