[
    uuid(3CB89DD9-2E5A-45D3-A6FF-E87B0081CDCC),
    helpstring("Fury² Game Creation System SoftFX library"),
    version(1.0),
    lcid(0x0409)
]
library SoftFX {

    typedef struct {
        int Left;
        int Top;
        int Width;
        int Height;
    } Rectangle;

    typedef struct {
        int Length;
        byte Red[256];
        byte Green[256];
        byte Blue[256];
    } ColorFilter;

    typedef struct {
        float X;
        float Y;
    } FPoint;

    typedef struct {
        int X;
        int Y;
    } IPoint;

    typedef struct {
        float X1;
        float Y1;
        float X2;
        float Y2;
    } FRect;

    typedef struct {
        FPoint start;
        FPoint end;
    } FLine;

    typedef struct {
        IPoint start;
        IPoint end;
    } ILine;

    typedef struct {
        float X;
        float Y;
        int Color;
    } GradientVertex;

    typedef struct {
        float X, Y;
        float U, V;
    } TexturedVertex;

    typedef struct {
        int VertexPointer;
        int VertexCount;
        int InactiveVertexCount;
        byte Reserved;
    } GenericPolygon;

    typedef struct {
        byte Hue;
        byte Sat;
        byte Lum;
        byte Alpha;
    } HSLA;

    typedef struct {
        byte RedStart;
        byte RedLength;
        byte GreenStart;
        byte GreenLength;
        byte BlueStart;
        byte BlueLength;
        byte AlphaStart;
        byte AlphaLength;
        int RedMask;
        int GreenMask;
        int BlueMask;
        int AlphaMask;
        byte Pitch;
    } PixelFormat;    

    typedef struct {
        int pData;
        int Alpha;
        int X1;
        int Y1;
        int X2;
        int Y2;
        int Width;
        int Height;
        int pTileset;
        int MaskedTile;
        int Effect;
        byte WrapX;
        byte WrapY;
        int pAnimationMap;
    } TilemapLayerParam;

    typedef struct {
        int WeightPointer;
        int Width, Height;
        int XOffset, YOffset;
        int Divisor;
    } ConvolutionFilter;

    typedef enum {
        SF_TopLeft = 1,
        SF_Top = 2,
        SF_TopRight = 4,
        SF_Right = 8,
        SF_BottomRight = 16,
        SF_Bottom = 32,
        SF_BottomLeft = 64,
        SF_Left = 128,
        SF_Middle = 256,
        SF_Edges = 127,
        SF_All = 511
    } WindowSkinSectionFlags;

    typedef enum {
        fxHardShadow = 1,
        fxSoftShadow = 2,
        fxCastShadow = 4
    } SpriteSpecialEffects;

    typedef enum {
        Blue = 0,
        Green = 1,
        Red = 2,
        Alpha = 3
    } ColorChannels;

    typedef struct {
        float Width;
        float Height;
        byte Type;
    } SpriteObstruction;

    typedef struct {
        int pImage;
        Rectangle Rectangle;
        float XCenter, YCenter;
        int MaskColor;
    } SpriteGraphic;

    typedef struct {
        short CollidedWith;
        byte CollidedWithMap;
        byte FadedOut;
        byte Moved;
        byte Changed;
    } EventParameters;

    typedef struct {
        short Effect;
        short SpecialFX;
        int Color;
        float Alpha;
        float ScaleLevel;
        float RotationAngle;
    } VisualParameters;

    typedef struct {
        byte Solid;
        byte Pushable;
        byte Platform;
        byte Cull;
        float Weight;
    } PhysicalParameters;

    typedef struct {
        int FrameCount;
        int pFrames;
        float XCenter, YCenter;
        int BlitMode;
        int Alpha;
        int Frame;
    } AnimatedGraphicParam;

    typedef struct {
        float X, Y, Z;
    } SpritePosition;

    typedef struct {
        float X, Y, Z, V, B, BR, BRT, A, AT;
    } SpriteVelocity;

    typedef struct {
        SpritePosition Position;
        SpriteVelocity Velocity;
        SpriteObstruction Obstruction;
        SpriteGraphic Graphic;
        VisualParameters Params;
        PhysicalParameters Stats;
        EventParameters Events;
        byte Type;
        byte ProcessType;
        byte Culled;
        short Index;
        int AttachedGraphic;
        int Next;
        int SortedNext;
    } SpriteParam;

    typedef struct {
        int pImage;
        Rectangle Rectangle;
        float Alpha;
        int ViewportX;
        int ViewportY;
    } CameraParam;

    typedef struct {
        int Width;
        int Height;
        int Lines;
        int Scroll_X;
        int Scroll_Y;
    } TextParam;

    typedef struct {
        int EffectMode;
        int MaskColor;
        int FillColor;
        int ShadowColor;
        int Alpha;
        int WrapMode;
        int BaseHeight;
        int BaseMode;
        int MapCount;
        int MapPointer;
    } FontParam;

    typedef struct {
        int pImages;
        int Alpha;
        int MaskColor;
        int CornerColors[4];
        byte BackgroundMode;
        byte EdgeMode;
        byte RenderMode;
        byte EdgeOffsets[4];
        int TintColors[9];
    } WindowSkinParam;

    typedef struct {
        int pImage;
        int MapValue;
        short XIncrement;
        short YIncrement;
        short XOffset;
        short YOffset;
    } CharacterParam;
    
    typedef struct {
      int ScrollX, ScrollY;
      Rectangle OutputRectangle;
      int OutputBuffer;
      int ScratchBuffer;
      float OutputScaleRatio;
    } LightingCamera;

    typedef struct {
      int Lights;
      int LightCount;
      int Obstructions;
      int ObstructionCount;
      int AmbientLight;
    } LightingEnvironment;
    
    typedef struct {
      float X, Y;
      int Color;
      int FalloffDistance;
      float Angle, Spread, SpinRate, FlickerLevel;
      byte NoiseOpacity;
    } LightSource;

    typedef struct {
      FLine Line;
    } LightingObstruction;

    typedef struct {
      int Tiles;
      int Tileset;
      int AnimationTable;
      int Sprites;
      int Opacity;
      int BlitMode;
      short IgnoredTile;
      byte WrapX, WrapY;
      byte Prerendered;
      byte Visible;
      float ParallaxX, ParallaxY;
    } MapLayer;

    typedef struct {
      int Width, Height;
      int LayerCount;
      int Layers;
    } Map;

    typedef struct {
      Rectangle Area;
      int OutputBuffer;
      int ScratchBuffer;
      int ViewportX, ViewportY;
      int Opacity;
    } MapCamera;

  [dllname("SoftFX.DLL"), helpstring("SoftFX")]
    module SoftFX {

        [entry("_Initialize@0")]
        void Initialize(void);
        [entry("_Uninitialize@0")]
        void UnInitialize(void);
        [entry("_GetInitialized@0")]
        int GetInitialized(void);

        [entry("_AllocateImage@8")]
        int AllocateImage(int Width, int Height);
        [entry("_AllocateDIBSection@12")]
        int AllocateDIBSection(int Width, int Height, int DC);
        [entry("_AllocateImageCopy@4")]
        int AllocateImageCopy(int Image);
        [entry("_AllocateImageFromFile@4")]
        int AllocateImageFromFile([string] char *Filename);
        [entry("_AllocateEmptyImage@0")]
        int AllocateEmptyImage();
        [entry("_SaveImageToPNG@8")]
        int SaveImageToPNG(int Image, [string] char *Filename);

        [entry("_ReallocateImage@12")]
        void ReAllocateImage(int Image, int Width, int Height);
        [entry("_ResizeImage@12")]
        void ResizeImage(int Image, int Width, int Height);
        [entry("_ResampleImage@20")]
        void ResampleImage(int Target, int Source, int Width, int Height, int Mode);
        [entry("_SlideImage@12")]
        void SlideImage(int Image, int X, int Y);
        [entry("_OptimizeImage@4")]
        void OptimizeImage(int Image);
        [entry("_UnsizeImage@4")]
        void UnsizeImage(int Image);

        [entry("_DeallocateImage@4")]
        void DeallocateImage(int Image);

        [entry("_GetImageRectangle@8")]
        int GetImageRectangle(int Image, Rectangle *Rectangle);

        [entry("_GetImageClipRectangle@8")]
        int GetImageClipRectangle(int Image, Rectangle *Rectangle);
        [entry("_SetImageClipRectangle@8")]
        void SetImageClipRectangle(int Image, Rectangle *Rectangle);

        [entry("_NormalizeRectangle@4")]
        void NormalizeRectangle(Rectangle *Rectangle);

        [entry("_GenerateColorFilter@16")]
        int GenerateColorFilter(ColorFilter *Filter, int RedGamma, int GreenGamma, int BlueGamma);

        [entry("_ClearImage@4")]
        int ClearImage(int Image);
        [entry("_FillImage@4")]
        int FillImage(int Image, int Color);
        [entry("_CopyImage@8")]
        int CopyImage(int Dest, int Source);
        [entry("_RotateImage@8")]
        int RotateImage(int Image, float Angle);

        [entry("_GetImageWidth@4")]
        int GetImageWidth(int Image);
        [entry("_GetImageHeight@4")]
        int GetImageHeight(int Image);
        [entry("_GetImagePitch@4")]
        int GetImagePitch(int Image);
        [entry("_GetImagePointer@12")]
        int GetImagePointer(int Image, int X, int Y);
        [entry("_GetImageDIBHandle@4")]
        int GetImageDIBHandle(int Image);

        [entry("_GetImageMatteColor@4")]
        int GetImageMatteColor(int Image);
        [entry("_SetImageMatteColor@8")]
        void SetImageMatteColor(int Image, int Color);

        [entry("_GetPixel@12")]
        int GetPixel(int Image, int X, int Y);
        [entry("_SetPixel@16")]
        int SetPixel(int Image, int X, int Y, int Color);

        [entry("_GetPixelAA@12")]
        int GetPixelAA(int Image, float X, float Y);
        [entry("_SetPixelAA@16")]
        int SetPixelAA(int Image, float X, float Y, int Color);

        [entry("_ClipRectangle_Image@8")]
        int ClipRectangle_Image(Rectangle *Rect, int Image);
        [entry("_ClipRectangle_ImageClipRect@8")]
        int ClipRectangle_ImageClipRect(Rectangle *Rect, int Image);

        [entry("_SetCallbacks@8")]
        void SetCallbacks(int pDIBSection, int pDeleteObject);

    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Primitives")]
    module Primitives {

        [entry("_FilterSimple_Box@12")]
        int Primitive_Box(int Image, Rectangle *Area, int Color);
        [entry("_FilterSimple_Box_SourceAlpha@12")]
        int Primitive_Box_SourceAlpha(int Image, Rectangle *Area, int Color);

        [entry("_FilterSimple_Line@12")]
        int Primitive_Line(int Image, Rectangle *Area, int Color);
        [entry("_FilterSimple_Line_AA@24")]
        int Primitive_Line_AA(int Image, float X1, float Y1, float X2, float Y2, int Color);
        [entry("_FilterSimple_Line_SourceAlpha@12")]
        int Primitive_Line_SourceAlpha(int Image, Rectangle *Area, int Color);
        [entry("_FilterSimple_Line_Gradient@16")]
        int Primitive_Line_Gradient(int Image, Rectangle *Area, int StartColor, int EndColor);
        [entry("_FilterSimple_Line_Gradient_SourceAlpha@16")]
        int Primitive_Line_Gradient_SourceAlpha(int Image, Rectangle *Area, int StartColor, int EndColor);

        [entry("_FilterSimple_Multiple_Line_AA@24")]
        int MultiPrimitive_Line_AA(int Image, FLine *Lines, int Color, int Count, float XOffset, float YOffset);

        [entry("_FilterSimple_ConvexPolygon@12")]
        int Primitive_ConvexPolygon(int Image, GenericPolygon *Poly, int Color);
        [entry("_FilterSimple_ConvexPolygon_Textured@20")]
        int Primitive_ConvexPolygon_Textured(int Image, int Texture, GenericPolygon *Poly, int Scaler, int Renderer);
        [entry("_FilterSimple_ConvexPolygon_Gradient@12")]
        int Primitive_ConvexPolygon_Gradient(int Image, GenericPolygon *Poly, int Renderer);

        [entry("_FilterSimple_Gradient_Horizontal@16")]
        int Filter_Gradient_Horizontal(int Image, Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_Vertical@16")]
        int Filter_Gradient_Vertical(int Image, Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_4Point@24")]
        int Filter_Gradient_4Point(int Image, Rectangle *Area, int Color1, int Color2, int Color3, int Color4);
        [entry("_FilterSimple_Gradient_Radial@16")]
        int Filter_Gradient_Radial(int Image, Rectangle *Area, int Color1, int Color2);

        [entry("_FilterSimple_Gradient_Horizontal_SourceAlpha@16")]
        int Filter_Gradient_Horizontal_SourceAlpha(int Image, Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_Vertical_SourceAlpha@16")]
        int Filter_Gradient_Vertical_SourceAlpha(int Image, Rectangle *Area, int Color1, int Color2);
        [entry("_FilterSimple_Gradient_4Point_SourceAlpha@24")]
        int Filter_Gradient_4Point_SourceAlpha(int Image, Rectangle *Area, int Color1, int Color2, int Color3, int Color4);
        [entry("_FilterSimple_Gradient_Radial_SourceAlpha@16")]
        int Filter_Gradient_Radial_SourceAlpha(int Image, Rectangle *Area, int Color1, int Color2);
    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Filters")]
    module Filters {

        [entry("_FilterSimple_ColorFilter@12")]
        int Filter_ColorFilter(int Image, Rectangle *Area, ColorFilter *Filter);

        [entry("_FilterSimple_Fill@12")]
        int Filter_Fill_Pointer(int Image, int pArea, int Color);

        [entry("_FilterSimple_Fill@12")]
        int Filter_Fill(int Image, Rectangle *Area, int Color);
        [entry("_FilterSimple_Fill_Opacity@16")]
        int Filter_Fill_Opacity(int Image, Rectangle *Area, int Color, int Opacity);
        [entry("_FilterSimple_Fill_SourceAlpha@12")]
        int Filter_Fill_SourceAlpha(int Image, Rectangle *Area, int Color);
        [entry("_FilterSimple_Fill_SourceAlpha_Opacity@16")]
        int Filter_Fill_SourceAlpha_Opacity(int Image, Rectangle *Area, int Color, int Opacity);
        [entry("_FilterSimple_Fill_Channel@16")]
        int Filter_Fill_Channel(int Image, Rectangle *Area, ColorChannels Channel, int Value);

        [entry("_FilterSimple_Grid_SourceAlpha@28")]
        int Filter_Grid_SourceAlpha(int Image, Rectangle *Area, int Color, int Width, int Height, int XOffset, int YOffset);

        [entry("_FilterSimple_Composite@12")]
        int Filter_Composite(int Image, Rectangle *Area, int Color);

        [entry("_FilterSimple_Swap_Channels@16")]
        int Filter_Swap_Channels(int Image, Rectangle *Area, ColorChannels Channel1, ColorChannels Channel2);

        [entry("_FilterSimple_Grayscale@8")]
        int Filter_Grayscale(int Image, Rectangle *Area);

        [entry("_FilterSimple_Invert@8")]
        int Filter_Invert(int Image, Rectangle *Area);
        [entry("_FilterSimple_Invert_Color@8")]
        int Filter_Invert_Color(int Image, Rectangle *Area);
        [entry("_FilterSimple_Invert_Channel@12")]
        int Filter_Invert_Channel(int Image, Rectangle *Area, ColorChannels Channel);

        [entry("_FilterSimple_Replace@16")]
        int Filter_Replace(int Image, Rectangle *Area, int Find, int Replace);

        [entry("_FilterSimple_Flip@8")]
        int Filter_Flip(int Image, Rectangle *Area);
        [entry("_FilterSimple_Mirror@8")]
        int Filter_Mirror(int Image, Rectangle *Area);
        [entry("_FilterSimple_Rotate90@4")]
        int Filter_Rotate90(int Image);

        [entry("_FilterSimple_Noise@8")]
        int Filter_Noise(int Image, Rectangle *Area);
        [entry("_FilterSimple_Noise_Grayscale@8")]
        int Filter_Noise_Grayscale(int Image, Rectangle *Area);
        [entry("_FilterSimple_Noise_Grayscale_Opacity@12")]
        int Filter_Noise_Grayscale_Opacity(int Image, Rectangle *Area, int Opacity);
        [entry("_FilterSimple_Noise_Grayscale_Subtractive@8")]
        int Filter_Noise_Grayscale_Subtractive(int Image, Rectangle *Area);
        [entry("_FilterSimple_Noise_Grayscale_Subtractive_Opacity@12")]
        int Filter_Noise_Grayscale_Subtractive_Opacity(int Image, Rectangle *Area, int Opacity);
        [entry("_FilterSimple_Noise_Channel@12")]
        int Filter_Noise_Channel(int Image, Rectangle *Area, ColorChannels Channel);

        [entry("_FilterSimple_Decay@12")]
        int Filter_Decay(int Image, Rectangle *Area, int Strength);
        [entry("_FilterSimple_Solarize@12")]
        int Filter_Solarize(int Image, Rectangle *Area, int Strength);

        [entry("_FilterSimple_Adjust@12")]
        int Filter_Adjust(int Image, Rectangle *Area, int Amount);
        [entry("_FilterSimple_Adjust_RGB@20")]
        int Filter_Adjust_RGB(int Image, Rectangle *Area, int RedAmount, int GreenAmount, int BlueAmount);
        [entry("_FilterSimple_Adjust_Channel@16")]
        int Filter_Adjust_Channel(int Image, Rectangle *Area, ColorChannels Channel, int Amount);

        [entry("_FilterSimple_Gamma@12")]
        int Filter_Gamma(int Image, Rectangle *Area, int Gamma);
        [entry("_FilterSimple_Gamma_RGB@20")]
        int Filter_Gamma_RGB(int Image, Rectangle *Area, int RedGamma, int GreenGamma, int BlueGamma);
        [entry("_FilterSimple_Gamma_Channel@16")]
        int Filter_Gamma_Channel(int Image, Rectangle *Area, ColorChannels Channel, int Gamma);

        [entry("_FilterSimple_Depalletize@20")]
        int Filter_Depalletize(int Image, Rectangle *Area, int Data, int Palette, int Length);

        [entry("_BlitConvolve_Normal@24")]
        int Filter_Convolution(int Output, int Input, int Filter, Rectangle *OutputArea, int InputX, int InputY);
        [entry("_BlitConvolve_Additive@24")]
        int Filter_Convolution_Additive(int Output, int Input, int Filter, Rectangle *OutputArea, int InputX, int InputY);
        [entry("_BlitConvolve_Subtractive@24")]
        int Filter_Convolution_Subtractive(int Output, int Input, int Filter, Rectangle *OutputArea, int InputX, int InputY);

    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Blitters")]
    module Blitters {
        
        [entry("_BlitSimple_Normal@20")]
        int Blit_Normal(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Normal_Opacity@24")]
        int Blit_Normal_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Normal_Gamma@24")]
        int Blit_Normal_Gamma(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Gamma);
        [entry("_BlitSimple_Normal_Gamma_Opacity@28")]
        int Blit_Normal_Gamma_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Gamma, int Opacity);

        [entry("_BlitSimple_Additive@20")]
        int Blit_Additive(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Additive_Opacity@24")]
        int Blit_Additive_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Subtractive@20")]
        int Blit_Subtractive(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Subtractive_Opacity@24")]
        int Blit_Subtractive_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Unerase@20")]
        int Blit_Unerase(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Unerase_Opacity@24")]
        int Blit_Unerase_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Erase@20")]
        int Blit_Erase(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Erase_Opacity@24")]
        int Blit_Erase_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Screen@20")]
        int Blit_Screen(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Screen_Opacity@24")]
        int Blit_Screen_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Multiply@20")]
        int Blit_Multiply(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Multiply_Opacity@24")]
        int Blit_Multiply_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Matte@20")]
        int Blit_Matte(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Matte_Opacity@24")]
        int Blit_Matte_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Matte_Tint@24")]
        int Blit_Matte_Tint(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Tint);
        [entry("_BlitSimple_Matte_Tint_Opacity@28")]
        int Blit_Matte_Tint_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Tint, int Opacity);

        [entry("_BlitSimple_Matte_ColorFilter_Opacity@28")]
        int Blit_Matte_ColorFilter_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, ColorFilter *Filter, int FilterOpacity, int Opacity);

        [entry("_BlitSimple_SourceAlpha@20")]
        int Blit_SourceAlpha(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_SourceAlpha_Opacity@24")]
        int Blit_SourceAlpha_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Merge@20")]
        int Blit_Merge(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Merge_Opacity@24")]
        int Blit_Merge_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Automatic_Matte_Opacity@24")]
        int Blit_Automatic_Matte_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Automatic_SourceAlpha_Opacity@24")]
        int Blit_Automatic_SourceAlpha_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_SourceAlpha_Tint@24")]
        int Blit_SourceAlpha_Tint(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Tint);
        [entry("_BlitSimple_SourceAlpha_Tint_Opacity@28")]
        int Blit_SourceAlpha_Tint_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Tint, int Opacity);

        [entry("_BlitSimple_SourceAlpha_ColorFilter_Opacity@32")]
        int Blit_SourceAlpha_ColorFilter_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, ColorFilter *Filter, int FilterOpacity, int Opacity);
        
        [entry("_BlitSimple_AND@20")]
        int Blit_AND(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);        
        [entry("_BlitSimple_OR@20")]
        int Blit_OR(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_XOR@20")]
        int Blit_XOR(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);

        [entry("_BlitSimple_Dither@20")]
        int Blit_Dither(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Dither_Opacity@24")]
        int Blit_Dither_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Dither_DualOpacity@28")]
        int Blit_Dither_DualOpacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity, int Opacity2);

        [entry("_BlitSimple_Lightmap@20")]
        int Blit_Lightmap(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Lightmap_Opacity@24")]
        int Blit_Lightmap_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);
        [entry("_BlitSimple_Lightmap_RGB@20")]
        int Blit_Lightmap_RGB(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY);
        [entry("_BlitSimple_Lightmap_RGB_Opacity@24")]
        int Blit_Lightmap_RGB_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Opacity);

        [entry("_BlitSimple_Font@24")]
        int Blit_Font(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_Opacity@28")]
        int Blit_Font_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);

        [entry("_BlitSimple_Font_SourceAlpha@24")]
        int Blit_Font_SourceAlpha(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_SourceAlpha_RGB@24")]
        int Blit_Font_SourceAlpha_RGB(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_SourceAlpha_Opacity@28")]
        int Blit_Font_SourceAlpha_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);
        [entry("_BlitSimple_Font_SourceAlpha_RGB_Opacity@28")]
        int Blit_Font_SourceAlpha_RGB_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);

        [entry("_BlitSimple_Font_Merge_RGB@24")]
        int Blit_Font_Merge_RGB(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color);
        [entry("_BlitSimple_Font_Merge_RGB_Opacity@28")]
        int Blit_Font_Merge_RGB_Opacity(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int Color, int Opacity);

        [entry("_BlitMask_Merge_Opacity@36")]
        int Blit_Mask_Merge_Opacity(int Dest, int Source, int Mask, Rectangle *Rect, int SourceX, int SourceY, int MaskX, int MaskY, int Opacity);

        [entry("_BlitTile_Normal@20")]
        int Blit_Tile_Normal(int Dest, int Source, Rectangle *Rect);
        [entry("_BlitTile_Normal_Opacity@24")]
        int Blit_Tile_Normal_Opacity(int Dest, int Source, Rectangle *Rect, int Opacity);
        [entry("_BlitTile_Matte_Opacity@24")]
        int Blit_Tile_Matte_Opacity(int Dest, int Source, Rectangle *Rect, int Opacity);
        [entry("_BlitTile_SourceAlpha_Opacity@24")]
        int Blit_Tile_SourceAlpha_Opacity(int Dest, int Source, Rectangle *Rect, int Opacity);
        
        [entry("_BlitResample_Normal@20")]
        int Blit_Resample_Normal(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Normal_Opacity@24")]
        int Blit_Resample_Normal_Opacity(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler, int Opacity);
        
        [entry("_BlitResample_Multiply@20")]
        int Blit_Resample_Multiply(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Multiply_Opacity@24")]
        int Blit_Resample_Multiply_Opacity(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler, int Opacity);

        [entry("_BlitResample_SourceAlpha@20")]
        int Blit_Resample_SourceAlpha(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_SourceAlpha_Opacity@24")]
        int Blit_Resample_SourceAlpha_Opacity(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler, int Opacity);

        [entry("_BlitResample_SourceAlpha_Tint@24")]
        int Blit_Resample_SourceAlpha_Tint(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler, int Tint);
        [entry("_BlitResample_SourceAlpha_Tint_Opacity@28")]
        int Blit_Resample_SourceAlpha_Tint_Opacity(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler, int Tint, int Opacity);

        [entry("_BlitResample_Additive@20")]
        int Blit_Resample_Additive(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Additive_Opacity@24")]
        int Blit_Resample_Additive_Opacity(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler, int Opacity);

        [entry("_BlitResample_Subtractive@20")]
        int Blit_Resample_Subtractive(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler);
        [entry("_BlitResample_Subtractive_Opacity@24")]
        int Blit_Resample_Subtractive_Opacity(int Dest, int Source, Rectangle *Rect, Rectangle *SourceRect, int Scaler, int Opacity);
        
        [entry("_BlitSimple_Channel@28")]
        int Blit_Channel(int Dest, int Source, Rectangle *Rect, int SourceX, int SourceY, int DestChannel, int SourceChannel);
    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Utility Functions")]
    module Utility {

        [entry("_ClipByte@4")]
        int ClipByte(int Value);
        [entry("_ClipValue@12")]
        int ClipValue(int Value, int Minimum, int Maximum);
        [entry("_WrapValue@12")]
        int WrapValue(int Value, int Minimum, int Maximum);
        [entry("_Floor@4")]
        int Floor(float Value);
        [entry("_Ceil@4")]
        int Ceil(float Value);

        [entry("_FillMemoryI8@12")]
        int FillMemoryByte([in] int Pointer, [in] byte Value, [in] int Count);
        [entry("_FillMemoryI16@12")]
        int FillMemoryShort([in] int Pointer, [in] short Value, [in] int Count);
        [entry("_FillMemoryI32@12")]
        int FillMemoryInteger([in] int Pointer, [in] int Value, [in] int Count);

        [entry("_GetStringLength@4")]
        int GetStringLength(int String);
        [entry("_StringCopy@8")]
        int StringCopy(int Dest, int Source);

        [entry("_ShiftLeft@8")]
        int ShiftLeft(int Value, int Bits);
        [entry("_ShiftRight@8")]
        int ShiftRight(int Value, int Bits);
        [entry("_Bitmask@8")]
        int Bitmask(int Start, int Count);
        [entry("_MaskBits@12")]
        int MaskBits(int Value, int Start, int Count);

        [entry("_Depalettize@20")]
        int Depalettize(int Dest, int Source, int Palette, int BPP, int Count);
        [entry("_PlanarDepalettize@24")]
        int PlanarDepalettize(int Dest, int Source, int Palette, int BPP, int Planes, int Count);

        [entry("_ClipLine@8")]
        int ClipLine(int Image, ILine* Line);
        [entry("_ClipFloatLine@8")]
        int ClipFLine(int Image, FLine* Line);

        [entry("_GetBilinearScaler@0")]
        int GetBilinearScaler();
        [entry("_GetLinearScaler@0")]
        int GetLinearScaler();

        [entry("_GetSourceAlphaRenderer@0")]
        int GetSourceAlphaRenderer();
        [entry("_GetAdditiveRenderer@0")]
        int GetAdditiveRenderer();
        [entry("_GetSubtractiveRenderer@0")]
        int GetSubtractiveRenderer();
        [entry("_GetShadowRenderer@0")]
        int GetShadowRenderer();
        [entry("_GetMergeRenderer@0")]
        int GetMergeRenderer();
    }

    [dllname("SoftFX.DLL"), helpstring("SoftFX Color Functions")]
    module Color {

        [entry("_BGRA@16")]
        int BGRA(int Red, int Green, int Blue, int Alpha);
        [entry("_BGR@12")]
        int BGR(int Red, int Green, int Blue);
        [entry("_RGBA@16")]
        int RGBA(int Red, int Green, int Blue, int Alpha);
        [entry("_RGB@12")]
        int RGB(int Red, int Green, int Blue);
        [entry("_GrayA@8")]
        int GrayA(int Gray, int Alpha);
        [entry("_Gray@4")]
        int Gray(int Gray);

        [entry("_BlendColors@12")]
        int BlendColors(int Dest, int Source, int Alpha);

        [entry("_GetAlpha@4")]
        int GetAlpha(int Color);
        [entry("_GetRed@4")]
        int GetRed(int Color);
        [entry("_GetGreen@4")]
        int GetGreen(int Color);
        [entry("_GetBlue@4")]
        int GetBlue(int Color);
        [entry("_GetGray@4")]
        int GetGray(int Color);

        [entry("_SetAlpha@8")]
        int SetAlpha(int Color, int Value);
        [entry("_SetRed@8")]
        int SetRed(int Color, int Value);
        [entry("_SetGreen@8")]
        int SetGreen(int Color, int Value);
        [entry("_SetBlue@8")]
        int SetBlue(int Color, int Value);
        [entry("_SetGray@8")]
        int SetGray(int Color, int Value);

        [entry("_SetChannel@12")]
        int SetChannel(int Color, ColorChannels Channel, int Value);
        [entry("_GetChannel@8")]
        int GetChannel(int Color, ColorChannels Channel);
        [entry("_SwapChannels@12")]
        int SwapChannels(int Color, ColorChannels Channel1, ColorChannels Channel2);

    }

    [dllname("SoftFX.DLL"), helpstring("Fury2 Graphics Functions")]
    module Fury2Engine {

        [entry("_RenderSprites@8")]
        int RenderSprites(int FirstSprite, CameraParam *Camera);
        [entry("_UpdateSprites@8")]
        int UpdateSprites(int FirstSprite, int CollisionMatrix);
        [entry("_SortSprites@4")]
        int SortSprites(int FirstSprite);
        [entry("_CullSprites@8")]
        int CullSprites(int FirstSprite, CameraParam *Camera);

        [entry("_CollisionCheck@20")]
        int CollisionCheck(int FirstSprite, int CheckSprite, int MustBeSolid, int RequiredType, int ExcludedType);
        [entry("_FindSprite@24")]
        int FindSprite(int FirstSprite, FRect *Area, int ExcludedSprite, int MustBeSolid, int RequiredType, int ExcludedType);

        [entry("_GetClosestSprite@24")]
        int GetClosestSprite(int FirstSprite, int CheckSprite, int MustBeSolid, int RequiredType, int ExcludedType, float *OutDistance);
        [entry("_GetFarthestSprite@24")]
        int GetFarthestSprite(int FirstSprite, int CheckSprite, int MustBeSolid, int RequiredType, int ExcludedType, float *OutDistance);

        [entry("_CheckLineCollide@12")]
        int CheckLineCollide(FRect *Region, int Lines, int LineCount);

        [entry("_RenderTilemapLayer@8")]
        int RenderTilemapLayer(TilemapLayerParam *Layer, CameraParam *Camera);
        [entry("_RenderMap@8")]
        int RenderMap(Map *Map, MapCamera *Camera);

        [entry("_RenderWindow@16")]
        int RenderWindow(int Image, Rectangle *Area, WindowSkinParam *Skin, int SectionFlags);

        [entry("_RenderFont@24")]
        int RenderFont([string] wchar_t* Text, int Dest, Rectangle *Rect, FontParam *fp, int YOffset, int pOutWidth);
        [entry("_RenderText@20")]
        int RenderText([string] wchar_t* Text, int Dest, Rectangle *Rect, FontParam *Font, TextParam *Options);

        [entry("_RenderLightingEnvironment@8")]
        int RenderLightingEnvironment(LightingCamera *Camera, LightingEnvironment *Environment);

        [entry("_RenderCollisionLines@20")]
        int RenderCollisionLines(int Image, int Lines, int Count, float XOffset, float YOffset);
        [entry("_RenderLines_Masked@28")]
        int RenderLines_Masked(int Image, int Lines, int Mask, int Color, int Count, float XOffset, float YOffset);
        [entry("_SelectLines@24")]
        int SelectLines(Rectangle *Area, int Lines, int Mask, int Count, float XOffset, float YOffset);

        [entry("_AllocateTileset@12")]
        int AllocateTileset(int Image, int TileWidth, int TileHeight);
        [entry("_GetTile@8")]
        int GetTile(int Tileset, int Index);
        [entry("_DeallocateTileset@4")]
        int DeallocateTileset(int Tileset);

        [entry("_SetShadowImage@4")]
        void SetShadowImage(int Image);

        [entry("_CreateCollisionMatrix@8")]
        int CreateCollisionMatrix(int Width, int Height);
        [entry("_AppendLinesToCollisionMatrix@12")]
        int AppendLinesToCollisionMatrix(int Matrix, FLine *Lines, int Count);
        [entry("_DeleteCollisionMatrix@4")]
        int DeleteCollisionMatrix(int Matrix);

    }

    [dllname("SoftFX.DLL"), helpstring("Fury2 Profiler")]
    module Profiler {

        [entry("_ProfileStart@4")]
        void ProfileStart([string] char* Name);
        [entry("_ProfileStop@4")]
        void ProfileStop([string] char* Name);
        [entry("_ProfileReset@0")]
        void ProfileReset();
        [entry("_ProfileUpdate@0")]
        void ProfileUpdate();
        [entry("_SetProfilerCallbacks@12")]
        void SetProfilerCallbacks(int ResetCallback, int PrintCallback, int QueryCallback);
    }
}
